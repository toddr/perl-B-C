<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
				<meta name="keywords" content="Perl 5 Internals" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/opensearch_desc.php" title="Books (English)" />
		<title>Perl 5 Internals - Books</title>
		<style type="text/css" media="screen,projection">/*<![CDATA[*/ @import "/skins/monobook/main.css?63"; /*]]>*/</style>
		<link rel="stylesheet" type="text/css" media="print" href="/skins/common/commonPrint.css?63" />
		<link rel="stylesheet" type="text/css" media="handheld" href="/skins/monobook/handheld.css?63" />
		<!--[if lt IE 5.5000]><style type="text/css">@import "/skins/monobook/IE50Fixes.css?63";</style><![endif]-->
		<!--[if IE 5.5000]><style type="text/css">@import "/skins/monobook/IE55Fixes.css?63";</style><![endif]-->
		<!--[if IE 6]><style type="text/css">@import "/skins/monobook/IE60Fixes.css?63";</style><![endif]-->
		<!--[if IE 7]><style type="text/css">@import "/skins/monobook/IE70Fixes.css?63";</style><![endif]-->
		<!--[if lt IE 7]><script type="text/javascript" src="/skins/common/IEFixes.js?63"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->
		
		<script type= "text/javascript">/*<![CDATA[*/
var skin = "monobook";
var stylepath = "/skins";
var wgArticlePath = "/index.php/$1";
var wgScriptPath = "";
var wgServer = "http://books.simon-cozens.org";
var wgCanonicalNamespace = "";
var wgCanonicalSpecialPageName = false;
var wgNamespaceNumber = 0;
var wgPageName = "Perl_5_Internals";
var wgTitle = "Perl 5 Internals";
var wgAction = "view";
var wgArticleId = "20";
var wgIsArticle = true;
var wgUserName = null;
var wgUserGroups = null;
var wgUserLanguage = "en";
var wgContentLanguage = "en";
var wgBreakFrames = false;
var wgCurRevisionId = "98";
/*]]>*/</script>
                
		<script type="text/javascript" src="/skins/common/wikibits.js?63"><!-- wikibits js --></script>
		<script type="text/javascript" src="/index.php?title=-&amp;action=raw&amp;gen=js"><!-- site js --></script>
		<style type="text/css">/*<![CDATA[*/
@import "/index.php?title=MediaWiki:Common.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=18000";
@import "/index.php?title=MediaWiki:Monobook.css&usemsgcache=yes&action=raw&ctype=text/css&smaxage=18000";
@import "/index.php?title=-&action=raw&gen=css&maxage=18000";
/*]]>*/</style>
		<!-- Head Scripts -->
	</head>
<body  class="mediawiki ns-0 ltr page-Perl_5_Internals">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
				<h1 class="firstHeading">Perl 5 Internals</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From Books</h3>
			<div id="contentSub"></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p>This series contains material adopted from the <a href="http://spork.sourceforge.net/" class="external text" title="http://spork.sourceforge.net/" rel="nofollow">Netizen Perl Training Fork</a>, by kind permission of Kirrily Robert.
</p>
<table id="toc" class="toc" summary="Contents"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Preliminaries"><span class="tocnumber">1</span> <span class="toctext">Preliminaries</span></a>
<ul>
<li class="toclevel-2"><a href="#Course_Outline"><span class="tocnumber">1.1</span> <span class="toctext">Course Outline</span></a></li>
<li class="toclevel-2"><a href="#Assumed_Knowledge"><span class="tocnumber">1.2</span> <span class="toctext">Assumed Knowledge</span></a>
<ul>
<li class="toclevel-3"><a href="#Note"><span class="tocnumber">1.2.1</span> <span class="toctext">Note</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Objectives"><span class="tocnumber">1.3</span> <span class="toctext">Objectives</span></a></li>
<li class="toclevel-2"><a href="#The_course_notes"><span class="tocnumber">1.4</span> <span class="toctext">The course notes</span></a>
<ul>
<li class="toclevel-3"><a href="#Note_2"><span class="tocnumber">1.4.1</span> <span class="toctext">Note</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1"><a href="#Perl_Development_Structure"><span class="tocnumber">2</span> <span class="toctext">Perl Development Structure</span></a>
<ul>
<li class="toclevel-2"><a href="#Perl_Versioning"><span class="tocnumber">2.1</span> <span class="toctext">Perl Versioning</span></a></li>
<li class="toclevel-2"><a href="#The_Development_Tracks"><span class="tocnumber">2.2</span> <span class="toctext">The Development Tracks</span></a></li>
<li class="toclevel-2"><a href="#Perl_5_Porters"><span class="tocnumber">2.3</span> <span class="toctext">Perl 5 Porters</span></a></li>
<li class="toclevel-2"><a href="#Pumpkins_and_Pumpkings"><span class="tocnumber">2.4</span> <span class="toctext">Pumpkins and Pumpkings</span></a></li>
<li class="toclevel-2"><a href="#The_Perl_Repository"><span class="tocnumber">2.5</span> <span class="toctext">The Perl Repository</span></a></li>
<li class="toclevel-2"><a href="#Summary"><span class="tocnumber">2.6</span> <span class="toctext">Summary</span></a></li>
<li class="toclevel-2"><a href="#Exercises"><span class="tocnumber">2.7</span> <span class="toctext">Exercises</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Parts_of_the_Interpreter"><span class="tocnumber">3</span> <span class="toctext">Parts of the Interpreter</span></a>
<ul>
<li class="toclevel-2"><a href="#Top_Level_Overview"><span class="tocnumber">3.1</span> <span class="toctext">Top Level Overview</span></a></li>
<li class="toclevel-2"><a href="#The_Perl_Library"><span class="tocnumber">3.2</span> <span class="toctext">The Perl Library</span></a></li>
<li class="toclevel-2"><a href="#The_XS_Library"><span class="tocnumber">3.3</span> <span class="toctext">The XS Library</span></a></li>
<li class="toclevel-2"><a href="#The_IO_Subsystem"><span class="tocnumber">3.4</span> <span class="toctext">The IO Subsystem</span></a></li>
<li class="toclevel-2"><a href="#The_Regexp_Engine"><span class="tocnumber">3.5</span> <span class="toctext">The Regexp Engine</span></a></li>
<li class="toclevel-2"><a href="#The_Parser_and_Tokeniser"><span class="tocnumber">3.6</span> <span class="toctext">The Parser and Tokeniser</span></a></li>
<li class="toclevel-2"><a href="#Variable_Handling"><span class="tocnumber">3.7</span> <span class="toctext">Variable Handling</span></a></li>
<li class="toclevel-2"><a href="#Run-time_Execution"><span class="tocnumber">3.8</span> <span class="toctext">Run-time Execution</span></a></li>
<li class="toclevel-2"><a href="#Support_Functions"><span class="tocnumber">3.9</span> <span class="toctext">Support Functions</span></a></li>
<li class="toclevel-2"><a href="#Testing"><span class="tocnumber">3.10</span> <span class="toctext">Testing</span></a></li>
<li class="toclevel-2"><a href="#Other_Utilities"><span class="tocnumber">3.11</span> <span class="toctext">Other Utilities</span></a></li>
<li class="toclevel-2"><a href="#Documentation"><span class="tocnumber">3.12</span> <span class="toctext">Documentation</span></a></li>
<li class="toclevel-2"><a href="#Summary_2"><span class="tocnumber">3.13</span> <span class="toctext">Summary</span></a></li>
<li class="toclevel-2"><a href="#Exercises_2"><span class="tocnumber">3.14</span> <span class="toctext">Exercises</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Internal_Variables"><span class="tocnumber">4</span> <span class="toctext">Internal Variables</span></a>
<ul>
<li class="toclevel-2"><a href="#Basic_SVs"><span class="tocnumber">4.1</span> <span class="toctext">Basic SVs</span></a>
<ul>
<li class="toclevel-3"><a href="#Basics_of_an_SV"><span class="tocnumber">4.1.1</span> <span class="toctext">Basics of an SV</span></a>
<ul>
<li class="toclevel-4"><a href="#sv_any"><span class="tocnumber">4.1.1.1</span> <span class="toctext">sv_any</span></a></li>
<li class="toclevel-4"><a href="#Reference_Counts"><span class="tocnumber">4.1.1.2</span> <span class="toctext">Reference Counts</span></a></li>
<li class="toclevel-4"><a href="#Flags"><span class="tocnumber">4.1.1.3</span> <span class="toctext">Flags</span></a></li>
</ul>
</li>
<li class="toclevel-3"><a href="#References"><span class="tocnumber">4.1.2</span> <span class="toctext">References</span></a></li>
<li class="toclevel-3"><a href="#Integers"><span class="tocnumber">4.1.3</span> <span class="toctext">Integers</span></a></li>
<li class="toclevel-3"><a href="#Strings"><span class="tocnumber">4.1.4</span> <span class="toctext">Strings</span></a></li>
<li class="toclevel-3"><a href="#Floating_point_numbers"><span class="tocnumber">4.1.5</span> <span class="toctext">Floating point numbers</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Arrays_and_Hashes"><span class="tocnumber">4.2</span> <span class="toctext">Arrays and Hashes</span></a>
<ul>
<li class="toclevel-3"><a href="#Arrays"><span class="tocnumber">4.2.1</span> <span class="toctext">Arrays</span></a></li>
<li class="toclevel-3"><a href="#Hashes"><span class="tocnumber">4.2.2</span> <span class="toctext">Hashes</span></a>
<ul>
<li class="toclevel-4"><a href="#What_is_a_.22hash.22_anyway.3F"><span class="tocnumber">4.2.2.1</span> <span class="toctext">What is a "hash" anyway?</span></a></li>
<li class="toclevel-4"><a href="#Hash_Entries"><span class="tocnumber">4.2.2.2</span> <span class="toctext">Hash Entries</span></a></li>
<li class="toclevel-4"><a href="#Hash_arrays"><span class="tocnumber">4.2.2.3</span> <span class="toctext">Hash arrays</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-2"><a href="#More_Complex_Types"><span class="tocnumber">4.3</span> <span class="toctext">More Complex Types</span></a>
<ul>
<li class="toclevel-3"><a href="#Objects"><span class="tocnumber">4.3.1</span> <span class="toctext">Objects</span></a></li>
<li class="toclevel-3"><a href="#Magic"><span class="tocnumber">4.3.2</span> <span class="toctext">Magic</span></a></li>
<li class="toclevel-3"><a href="#Tied_Variables"><span class="tocnumber">4.3.3</span> <span class="toctext">Tied Variables</span></a></li>
<li class="toclevel-3"><a href="#Globs_and_Stashes"><span class="tocnumber">4.3.4</span> <span class="toctext">Globs and Stashes</span></a></li>
<li class="toclevel-3"><a href="#Code_Values"><span class="tocnumber">4.3.5</span> <span class="toctext">Code Values</span></a></li>
<li class="toclevel-3"><a href="#Lexical_Variables"><span class="tocnumber">4.3.6</span> <span class="toctext">Lexical Variables</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Inheritance"><span class="tocnumber">4.4</span> <span class="toctext">Inheritance</span></a></li>
<li class="toclevel-2"><a href="#Summary_3"><span class="tocnumber">4.5</span> <span class="toctext">Summary</span></a></li>
<li class="toclevel-2"><a href="#Exercises_3"><span class="tocnumber">4.6</span> <span class="toctext">Exercises</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#The_Lexer_and_the_Parser"><span class="tocnumber">5</span> <span class="toctext">The Lexer and the Parser</span></a>
<ul>
<li class="toclevel-2"><a href="#The_Parser"><span class="tocnumber">5.1</span> <span class="toctext">The Parser</span></a>
<ul>
<li class="toclevel-3"><a href="#BNF_and_Parsing"><span class="tocnumber">5.1.1</span> <span class="toctext">BNF and Parsing</span></a></li>
<li class="toclevel-3"><a href="#Parse_actions_and_token_values"><span class="tocnumber">5.1.2</span> <span class="toctext">Parse actions and token values</span></a></li>
<li class="toclevel-3"><a href="#Parsing_some_Perl"><span class="tocnumber">5.1.3</span> <span class="toctext">Parsing some Perl</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#The_Tokeniser"><span class="tocnumber">5.2</span> <span class="toctext">The Tokeniser</span></a>
<ul>
<li class="toclevel-3"><a href="#Basic_tokenising"><span class="tocnumber">5.2.1</span> <span class="toctext">Basic tokenising</span></a>
<ul>
<li class="toclevel-4"><a href="#Tokeniser_State"><span class="tocnumber">5.2.1.1</span> <span class="toctext">Tokeniser State</span></a></li>
<li class="toclevel-4"><a href="#Looking_ahead"><span class="tocnumber">5.2.1.2</span> <span class="toctext">Looking ahead</span></a></li>
<li class="toclevel-4"><a href="#Keywords"><span class="tocnumber">5.2.1.3</span> <span class="toctext">Keywords</span></a></li>
</ul>
</li>
<li class="toclevel-3"><a href="#Sublexing"><span class="tocnumber">5.2.2</span> <span class="toctext">Sublexing</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Summary_4"><span class="tocnumber">5.3</span> <span class="toctext">Summary</span></a></li>
<li class="toclevel-2"><a href="#Exercises_4"><span class="tocnumber">5.4</span> <span class="toctext">Exercises</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Fundamental_Operations"><span class="tocnumber">6</span> <span class="toctext">Fundamental Operations</span></a>
<ul>
<li class="toclevel-2"><a href="#The_basic_op"><span class="tocnumber">6.1</span> <span class="toctext">The basic op</span></a>
<ul>
<li class="toclevel-3"><a href="#The_different_operations"><span class="tocnumber">6.1.1</span> <span class="toctext">The different operations</span></a></li>
<li class="toclevel-3"><a href="#Different_.22flavours.22_of_op"><span class="tocnumber">6.1.2</span> <span class="toctext">Different "flavours" of op</span></a></li>
<li class="toclevel-3"><a href="#Tying_it_all_together"><span class="tocnumber">6.1.3</span> <span class="toctext">Tying it all together</span></a>
<ul>
<li class="toclevel-4"><a href="#.22Tree.22_order"><span class="tocnumber">6.1.3.1</span> <span class="toctext">"Tree" order</span></a></li>
<li class="toclevel-4"><a href="#Execution_Order"><span class="tocnumber">6.1.3.2</span> <span class="toctext">Execution Order</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-2"><a href="#PP_Code"><span class="tocnumber">6.2</span> <span class="toctext">PP Code</span></a>
<ul>
<li class="toclevel-3"><a href="#The_argument_stack"><span class="tocnumber">6.2.1</span> <span class="toctext">The argument stack</span></a></li>
<li class="toclevel-3"><a href="#Stack_manipulation"><span class="tocnumber">6.2.2</span> <span class="toctext">Stack manipulation</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#The_opcode_table_and_opcodes.pl"><span class="tocnumber">6.3</span> <span class="toctext">The opcode table and opcodes.pl</span></a></li>
<li class="toclevel-2"><a href="#Scatchpads_and_Targets"><span class="tocnumber">6.4</span> <span class="toctext">Scatchpads and Targets</span></a></li>
<li class="toclevel-2"><a href="#The_Optimizer"><span class="tocnumber">6.5</span> <span class="toctext">The Optimizer</span></a></li>
<li class="toclevel-2"><a href="#Summary_5"><span class="tocnumber">6.6</span> <span class="toctext">Summary</span></a></li>
<li class="toclevel-2"><a href="#Exercises_5"><span class="tocnumber">6.7</span> <span class="toctext">Exercises</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#The_Perl_Compiler"><span class="tocnumber">7</span> <span class="toctext">The Perl Compiler</span></a>
<ul>
<li class="toclevel-2"><a href="#What_is_the_Perl_Compiler.3F"><span class="tocnumber">7.1</span> <span class="toctext">What is the Perl Compiler?</span></a></li>
<li class="toclevel-2"><a href="#B::_Modules"><span class="tocnumber">7.2</span> <span class="toctext">B:: Modules</span></a>
<ul>
<li class="toclevel-3"><a href="#B::Concise"><span class="tocnumber">7.2.1</span> <span class="toctext">B::Concise</span></a></li>
<li class="toclevel-3"><a href="#B::Debug"><span class="tocnumber">7.2.2</span> <span class="toctext">B::Debug</span></a></li>
<li class="toclevel-3"><a href="#B::Deparse"><span class="tocnumber">7.2.3</span> <span class="toctext">B::Deparse</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#What_B_and_O_Provide"><span class="tocnumber">7.3</span> <span class="toctext">What B and O Provide</span></a>
<ul>
<li class="toclevel-3"><a href="#O"><span class="tocnumber">7.3.1</span> <span class="toctext">O</span></a></li>
<li class="toclevel-3"><a href="#B"><span class="tocnumber">7.3.2</span> <span class="toctext">B</span></a></li>
</ul>
</li>
<li class="toclevel-2"><a href="#Using_B_for_Simple_Things"><span class="tocnumber">7.4</span> <span class="toctext">Using B for Simple Things</span></a></li>
<li class="toclevel-2"><a href="#Summary_6"><span class="tocnumber">7.5</span> <span class="toctext">Summary</span></a></li>
<li class="toclevel-2"><a href="#Exercises_6"><span class="tocnumber">7.6</span> <span class="toctext">Exercises</span></a></li>
</ul>
</li>
</ul>
</td></tr></table><script type="text/javascript"> if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } </script>
<a name="Preliminaries"></a><h1><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=1" title="Edit section: Preliminaries">edit</a>]</span> <span class="mw-headline"> Preliminaries </span></h1>
<p>Welcome to NetThink's <span class="emphasis"><i>Perl 5 Internals</i></span> training course. This is a three-hour course which provides a hands-on introduction to how the <code class="filename">perl</code> interpreter works internally, how to go about testing and fixing bugs in the interpreter, and what the internals are likely to look like in the future of Perl, Perl 6.
</p>
<div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="Course_Outline"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=2" title="Edit section: Course Outline">edit</a>]</span> <span class="mw-headline"> Course Outline </span></h2>
<ul><li> Development Structure
</li><li> Parts of the Interpreter
</li><li> Internal Variables
</li><li> The Lexer and the Parser
</li><li> Fundamental operations
</li><li> The Runtime Environment
</li><li> The Perl Compiler
</li><li> Hacking on <code class="filename">perl</code>
</li><li> Perl 6 Internals
</li></ul>
<a name="Assumed_Knowledge"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=3" title="Edit section: Assumed Knowledge">edit</a>]</span> <span class="mw-headline"> Assumed Knowledge </span></h2>
<p>On this course, it is assumed that you will:
</p>
<ul><li> be able to program Perl to at least an "intermediate" level; completing NetThink's "Intermediate Perl" course is regarded as an adequate standard.
</li><li> have some familiarity with the C programming language.
</li><li> be able to use a compiler and, if necessary, symbolic debugger, without prompting.
</li></ul>
<a name="Note"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=4" title="Edit section: Note">edit</a>]</span> <span class="mw-headline"> Note </span></h3>
<p>Knowledge of XS is not required, but is beneficial.
</p>
<a name="Objectives"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=5" title="Edit section: Objectives">edit</a>]</span> <span class="mw-headline"> Objectives </span></h2>
<p>The aim of this course is to give you not just an understanding of the workings of the <code class="filename">perl</code> interpreter, but also the means to investigate more about it, to analyze and solve bugs in the Perl core, and to take part in the Perl development process.
</p>
<a name="The_course_notes"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=6" title="Edit section: The course notes">edit</a>]</span> <span class="mw-headline"> The course notes </span></h2>
<p>These course notes contain material which will guide you through the topics listed above, as well as appendices containing other useful information.
</p><p>The following typographic conventions are used in these notes:
</p><p>System commands appear in <span><b>this typeface</b></span>
</p><p>Literal text which you should type in to the command line or editor appears as <code class="literal">monospaced font</code>.
</p><p>Keystrokes which you should type appear like this: <span><b>ENTER</b></span>. Combinations of keys appear like this: <span><b>CTRL</b></span>-<span><b>D</b></span>
</p>
<pre>Program listings and other literal listings of what appears on the
screen appear in a monospaced font like this.
</pre>
<p>Parts of commands or other literal text which should be replaced by your own specific values appears <code class="literal"><i>&lt;code&gt;like this</code></i>&lt;/code&gt;
</p>
<div class="note" style="margin-left: 0.5in; margin-right: 0.5in">
<a name="Note_2"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=7" title="Edit section: Note">edit</a>]</span> <span class="mw-headline"> Note </span></h3>
<p>Notes and tips appear offset from the text like this.
</p>
</div><font color="red">&lt;advanced&gt;
<p>Notes which are marked "Advanced" are for those who are racing ahead or who already have some knowledge of the topic at hand. The information contained in these notes is not essential to your understanding of the topic, but may be of interest to those who want to extend their knowledge.
</p><p>&lt;/advanced&gt;</font><font color="red">&lt;readme&gt;
</p><p>Notes marked with "Readme" are pointers to more information which can be found in your textbook or in online documentation such as manual pages or websites.
</p>
&lt;/readme&gt;</font></div></div><div class="chapter" lang="en"><div class="titlepage"><div><div>
<a name="Perl_Development_Structure"></a><h1><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=8" title="Edit section: Perl Development Structure">edit</a>]</span> <span class="mw-headline"> Perl Development Structure </span></h1>
<p>The aim of this section is to familiarize you with the process by which the Perl interpreter is developed and maintained. Most internals hacking is carried out on the "bleeding edge" of the Perl sources, and so you need to understand what these are and how to get them.
</p><p>It's also important to understand the structure of the Perl development community; how it's organized, and how it works.
</p>
<div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="Perl_Versioning"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=9" title="Edit section: Perl Versioning">edit</a>]</span> <span class="mw-headline"> Perl Versioning </span></h2>
</div></div></div>
<p>Perl has two types of version number: versions before 5.6.0 used a number of the form <code class="literal">x.yyyy_zz</code>; <code class="literal">x</code> was the major version number, (Perl 4, Perl 5) <code class="literal">y</code> was the minor release number, and <code class="literal">z</code> was the patchlevel. Major releases represented, for instance, either a complete rewrite or a major upheaval of the internals; minor releases sometimes added non-essential functionality, and releases changing the patchlevel were primarily to fix bugs. Releases where <code class="literal">z</code> was 50 or more were unstable, developers' releases working towards the next minor release.
</p><p>Now, since, 5.6.0, Perl uses the more standard open source version numbering system - version numbers are of the form <code class="literal">x.y.z</code>; releases where <code class="literal">y</code> is even are stable releases, and releases where it is odd are part of the <i>development track</i>.
</p>
</div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="The_Development_Tracks"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=10" title="Edit section: The Development Tracks">edit</a>]</span> <span class="mw-headline"> The Development Tracks </span></h2>
</div></div></div>
<p>Perl development has four major aims: extending portability, fixing bugs, optimizations, and adding language features. Patches to Perl are usually made against the latest copy of the development release; the very latest copy, stored in the Perl repository (see [#perlrep the section called “The Perl Repository”] below) is usually called `bleadperl'.
</p><p>The bleadperl eventually becomes the new minor release, but patches are also picked up by the maintainer of the stable release for inclusion. While there are no hard and fast rules, and everything is left to the discretion of the maintainer, in general, patches which are bug fixes or address portability concerns (which include taking advantage of new features in some platforms, such as large file support or 64 bit integers) are merged into the stable release as well, whereas new language features tend to be left until the next minor release. Optimizations may or may not be included, depending on their impact on the source.
</p>
</div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="Perl_5_Porters"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=11" title="Edit section: Perl 5 Porters">edit</a>]</span> <span class="mw-headline"> Perl 5 Porters </span></h2>
</div></div></div>
<p>In February 2001, there were nearly 200 individuals involved in the development of Perl; these developers, or `porters', communicate through the use of the <code class="literal">perl5-porters</code> mailing list; if you are planning to get involved in helping to develop or maintain Perl, a subscription to this list is essential.
</p><p>You can subscribe by sending an email to <code class="literal">perl5-porters-subscribe@perl.org</code>; you'll be asked to send an email to confirm, and then you should start receiving mail from the list. To send mail, to the list, address the mail to <code class="literal">perl5-porters@perl.org</code>; you don't have to be subscribed to post, and the list is not moderated. If, for whatever reason, you decide to unsubscribe, simply mail <code class="literal">perl5-porters-unsubscribe@perl.org</code>.
</p><p>The list usually receives between 200 and 400 mails a week. If this is too much for you, you can subscribe instead to a daily digest service by mailing <code class="literal">perl5-porters-digest-subscribe@perl.org</code>. Alternatively, I write a weekly summary of the list, published on <a href="http://www.perl.com/" class="external text" title="http://www.perl.com/" rel="nofollow">the Perl home page</a>.
</p><p>There is also a <a href="http://simon-cozens.org/writings/p5p-faq" class="external text" title="http://simon-cozens.org/writings/p5p-faq" rel="nofollow"><code class="literal">perl5-porters</code> FAQ</a> which explains a lot of this, plus more about how to behave on P5P and how to submit patches to Perl.
</p>
<a name="Pumpkins_and_Pumpkings"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=12" title="Edit section: Pumpkins and Pumpkings">edit</a>]</span> <span class="mw-headline"> Pumpkins and Pumpkings </span></h2>
<p> Development is very loosely organised around the release managers of the stable and the development tracks; these are the two ``pumpkings''. 
</p><p> Perl development can also be divided up into several smaller sub-systems: the regular expression engine, the configuration process, the documentation, and so on. Responsibility for each of these areas is known as a ``pumpkin'', and hence those who semi-officially take responsibility for are called ``pumpkings''. 
</p><p>At the time of writing, the Pumpking for 5.8.x is Nicholas Clark, and the Pumpking for 5.9.x is Rafael Garcia-Suarez.
</p><p>You're probably wondering why the silly titles. It stems from the days before Perl was kept under version control, and people had to manually `check out' a chunk of the Perl source to avoid conflicts by announcing their intentions to the mailing list; while they were discussing what this should be called, one of Chip Salzenburg's co-workers told him about a system they had used for preventing two people using a tape drive at once: there was a stuffed pumpkin in the office, and nobody could use the drive unless they had the pumpkin.
</p>
<a name="The_Perl_Repository"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=13" title="Edit section: The Perl Repository">edit</a>]</span> <span class="mw-headline"> The Perl Repository </span></h2>
<p>Now Perl is kept in a version control system called <a href="http://www.perforce.com/" class="external text" title="http://www.perforce.com/" rel="nofollow">Perforce</a>, which is hosted by ActiveState, Inc. There is no public access to the system itself, but various methods have been devised to allow developers near-realtime access.
</p><p>Firstly, there is the <a href="http://public.activestate.com/pub/apc/" class="external text" title="http://public.activestate.com/pub/apc/" rel="nofollow">Archive of Perl Changes.</a> This web site contains both the current state of all the maintained Perl versions, and also a directory of changes made to the repository.
</p><p>Since it's a little inconvenient to keep up to date using HTTP, the directories are also available via the software synchronisation protocol <a href="http://rsync.samba.org/" class="external text" title="http://rsync.samba.org/" rel="nofollow">rsync</a>. If you have <span><b>rsync</b></span> installed, you can synchronise your working directory with the bleeding-edge Perl tree (usually called `bleadperl') in the repository by issuing the command
</p>
<pre>	<code class="prompt">%</code> <b><code>rsync -avz rsync://public.activestate.com/perl-current/ . 	</code></b>

</pre>
<p>There are also periodic snapshots of bleadperl released by the development pumpking, particularly when some important change happens. These are usually available from a variety of URLs, and always from <a href="ftp://ftp.funet.fi/pub/languages/perl/snap/" class="external free" title="ftp://ftp.funet.fi/pub/languages/perl/snap/" rel="nofollow">ftp://ftp.funet.fi/pub/languages/perl/snap/</a>.
</p><p>Finally, there is a repository browser available at <a href="http://public.activestate.com/cgi-bin/perlbrowse" class="external free" title="http://public.activestate.com/cgi-bin/perlbrowse" rel="nofollow">http://public.activestate.com/cgi-bin/perlbrowse</a> which can tell you the current status of individual files, as well as provide an annotated `blame log' cross-referencing each line in a file to the latest patch to affect it.
</p>
<a name="Summary"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=14" title="Edit section: Summary">edit</a>]</span> <span class="mw-headline"> Summary </span></h2>
<ul><li> Perl versions are numbers of the form x.y.z, where y is odd for development and even for stable versions.
</li><li> Perl development takes place on the <a href="mailto:perl5-porters@perl.org" class="external text" title="mailto:perl5-porters@perl.org" rel="nofollow">perl5-porters mailing list</a>
</li></ul>
<a name="Exercises"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=15" title="Edit section: Exercises">edit</a>]</span> <span class="mw-headline"> Exercises </span></h2>
<ol><li> Obtain a copy of the development sources to Perl from CPAN. Unpack the archive, and familiarize yourself with the layout of its contents.
</li><li> Use <span><b>rsync</b></span> to update the copy to <code class="literal">bleadperl</code>. How many bytes changed?
</li><li> Subscribe to perl5-porters, if you haven't already done so. Spend a few moments reading through the FAQ. If you have already subscribed, read through back issues of the summaries.
</li></ol>
<a name="Parts_of_the_Interpreter"></a><h1><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=16" title="Edit section: Parts of the Interpreter">edit</a>]</span> <span class="mw-headline"> Parts of the Interpreter </span></h1>
<p>This chapter will take you through the various parts of the <code class="filename">perl</code> interpreter, giving you an overview of its operation and the stages that a Perl program goes through when executed. By the end of this chapter you should be comfortable with the structure of the <code class="filename">perl</code> source and be able to locate functions and routines in the source tree based on a brief description of their operation.
</p>
<div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="Top_Level_Overview"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=17" title="Edit section: Top Level Overview">edit</a>]</span> <span class="mw-headline"> Top Level Overview </span></h2>
</div></div></div>
<p><code class="filename">perl</code> is not exactly an interpreter and it's not exactly a compiler: it's a bytecode compiler. First compiles the input source code to an internal representation or <i>bytecode</i>, and then it executes the operations that the bytecode specifies on a virtual machine.
</p><p><font color="red">&lt;advanced&gt;
</p><p>How does this differ from, say, Java? Java's virtual machine is designed to represented an idealised version of a computer's processor. In Perl's case, however, the individual operations that can be performed are considerably higher-level. For instance, a regular expression match is a single "instruction" in Perl's virtual machine.
</p><p>Again, like a real hardware processor, Java's VM stores its calculations in registers; Perl, on the other hand, uses a stack to co-ordinate and communicate results between operations.
</p><p>&lt;/advanced&gt;</font>
</p><p>The name we give to the first stage is "parsing", although, as we'll see, parsing refers to a specific operation. The input to this stage is your Perl source code; the output is a tree data structure which represents what that code "means".
</p><p>One of the nodes in this tree is designated the "start" node; every node will have an operation to perform, and a pointer to the node that the interpreter must execute next.
</p><p>Hence, the second phase of the operation is to execute the start node and follow the chain of pointers around the tree, executing each operation in the correct order. In later parts of this course, we'll examine exactly how the operations are executed and what they mean.
</p><p>First, however, we will examine the various distinct areas of the Perl source tree.
</p>
</div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="The_Perl_Library"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=18" title="Edit section: The Perl Library">edit</a>]</span> <span class="mw-headline"> The Perl Library </span></h2>
</div></div></div>
<p>The most approachable part of the source code, for Perl programmers, is the Perl library. This lives in <code class="filename">lib/</code>, and comprises all the standard, pure Perl modules and pragmata that ship with <code class="filename">perl</code>.
</p><p>There are both Perl 5 modules and unmaintained Perl 4 libraries, shipped for backwards compatibility. In Perl 5.6.0 and above, the Unicode tables are placed in <code class="filename">lib/unicode</code>.
</p>
</div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="The_XS_Library"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=19" title="Edit section: The XS Library">edit</a>]</span> <span class="mw-headline"> The XS Library </span></h2>
</div></div></div>
<p>In <code class="filename">ext/</code>, we find the XS modules which ship with Perl. For instance, the Perl compiler (see [#compiler Chapter�7, <i> The Perl Compiler</i>]) <code class="classname">B</code> can be found here, as can the DBM interfaces. The most important XS module here is <code class="classname">DynaLoader</code>, the dynamic loading interface which allows the runtime loading of every other XS module.
</p><p>As a special exception, the XS code to the methods in the <code class="classname">UNIVERSAL</code>, <code class="classname">Tie::Hash::NamedCapture</code>, <code class="classname">Internals</code> classes along with some methods of <code class="classname">utf8</code>, <code class="classname">re</code>, and <code class="classname">version</code> classes can be found in <code class="filename">universal.c</code>.
</p>
</div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="The_IO_Subsystem"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=20" title="Edit section: The IO Subsystem">edit</a>]</span> <span class="mw-headline"> The IO Subsystem </span></h2>
</div></div></div>
<p>Recent versions of Perl come with a completely new standard IO implementation, <code class="classname">PerlIO</code>. This allows for several "layers" to be defined through which all IO is filtered, similar to the line disciplines mechanism in <code class="classname">sfio</code>. These layers interact with modules such as <code class="classname">PerlIO::Scalar</code>, also in the <code class="filename">ext/</code> directory.
</p><p>The IO subsystem is implemented in <code class="filename">perlio.c</code> and <code class="filename">perlio.h</code>. Declarations for defining the layers are in <code class="filename">perliol.h</code>, and documentation on how to create layers is in <code class="filename">pod/perliol.pod</code>.
</p><p>Perl may be compiled without <code class="classname">PerlIO</code> support, in which case there are a number of abstraction layers to present a unified IO interface to the Perl core. <code class="filename">perlsdio.h</code> aliases ordinary standard IO functions to their <code class="classname">PerlIO</code> names, and <code class="filename">perlsfio.h</code> does the same thing for the alternate IO library <code class="classname">sfio</code>.
</p><p>The other abstraction layer is the "Perl host" scheme in <code class="filename">iperlsys.h</code>. This is confusing. The idea is to reduce process overhead on Win32 systems by having multiple Perl interpreters access all system calls through a shared "Perl host" abstraction object. There is an explanation of it in <code class="filename">perl.h</code>, but it is best avoided.
</p>
</div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="The_Regexp_Engine"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=21" title="Edit section: The Regexp Engine">edit</a>]</span> <span class="mw-headline"> The Regexp Engine </span></h2>
</div></div></div>
<p>Another area of the Perl source best avoided is the regular expression engine. This lives in <code class="filename">re*.*</code>. The regular expression matching engine is, roughly speaking, a state machine generator. Your match pattern is turned into a state machine made up of various match nodes - you can see these nodes in <code class="filename">regcomp.sym</code>. The compilation phase is handled by <code class="filename">regcomp.c</code>, and the state machine's execution is performed in <code class="filename">regexec.c</code>.
</p><p><font color="red">&lt;advanced&gt;<font color="red">&lt;title&gt;Did You Know?&lt;/title&gt;</font>
</p><p>The regular expression compiler and interpreter are actually switchable; it's possible to remove Perl's default regular expression engine and insert one's own custom engine. (This is done by changing the value of the global variables <code class="varname">PL_regcompp</code> and <code class="varname">PL_regexecp</code> to be function pointers to the required routines.) In fact, that's exactly what the <code class="classname">re</code> module does.
</p>
&lt;/advanced&gt;</font></div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="The_Parser_and_Tokeniser"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=22" title="Edit section: The Parser and Tokeniser">edit</a>]</span> <span class="mw-headline"> The Parser and Tokeniser </span></h2>
</div></div></div>
<p>As mentioned above, the first stage in Perl's operation is to "understand" your program. This is done by a joint effort of the tokeniser and the parser. The tokeniser is found in <code class="filename">toke.c</code>, and the parser in <code class="filename">perly.c</code>. (although you're far, far better off looking at the YACC source in <code class="filename">perly.y</code>)
</p><p>The job of the tokeniser is to split up the input into meaningful chunks, or <i>tokens</i>, and also to determine what type of thing they represent - a Perl keyword, a variable, a subroutine name, and so on. The job of the parser is to take these tokens and turn them into "sentences", understanding their relative meaning in context. We'll examine their operation in more detail in [#lexparse Chapter�5, <i>The Lexer and the Parser</i>].
</p>
</div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="Variable_Handling"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=23" title="Edit section: Variable Handling">edit</a>]</span> <span class="mw-headline"> Variable Handling </span></h2>
</div></div></div>
<p>Perl's data types - scalars, arrays, hashes, and so on - are far more flexible than C's, and hence have to be implemented quite carefully in terms of C equivalents. The code for handling arrays is in <code class="filename">av.*</code>, hashes are in <code class="filename">hv.*</code> and scalars are in <code class="filename">sv.*</code>. See also [#perlvar Chapter�4, <i> Internal Variables </i>].
</p>
</div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="Run-time_Execution"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=24" title="Edit section: Run-time Execution">edit</a>]</span> <span class="mw-headline"> Run-time Execution </span></h2>
</div></div></div>
<p>What about the code to Perl's built-ins - <code class="literal">print</code>, <code class="literal">foreach</code> and the like? These live in <code class="filename">pp.*</code>, and will be examine in much more detail in [#ops.ppcode the section called “ PP Code ”]. Some of the functionality is shelled out to <code class="filename">doio.c</code>.
</p><p>The actual main loop of the interpreter is in <code class="filename">run.c</code>.
</p>
</div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="Support_Functions"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=25" title="Edit section: Support Functions">edit</a>]</span> <span class="mw-headline"> Support Functions </span></h2>
</div></div></div>
<p>There are a number of routines which help out to make the Perl internals easier to program. For instance, <code class="filename">scope.[ch]</code> contains functions which allow you to save away and restore values on a stack. <code class="filename">locale.c</code> handles locale functions, <code class="filename">malloc.c</code> is a Perl-specific memory allocation library, <code class="filename">utf8.c</code> handles all the Unicode manipulation, <code class="filename">numeric.c</code> contains many handy numeric functions and <code class="filename">util.c</code> has various other useful things.
</p>
</div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="Testing"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=26" title="Edit section: Testing">edit</a>]</span> <span class="mw-headline"> Testing </span></h2>
</div></div></div>
<p>Every aspect of Perl's operation has a related test, and these test files live in the <code class="filename">t/</code> directory. Tests for individual library and XS modules are slowly being relocated to <code class="filename">lib/</code> and <code class="filename">ext/</code> respectively, but at time of writing, there are over 23,000 separate tests in over 400 test files.
</p><p>On a related note, functions for debugging Perl itself are to be found in <code class="filename">deb.c</code> and <code class="filename">dump.c</code>. The distinction is that functions in <code class="filename">deb.c</code> are typically accessible from the <code class="literal">-D</code> flag on the Perl command line, whereas things in <code class="filename">dump.c</code> may need to be used from a source-level debugger.
</p>
</div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="Other_Utilities"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=27" title="Edit section: Other Utilities">edit</a>]</span> <span class="mw-headline"> Other Utilities </span></h2>
</div></div></div>
<p>Perl ships with a host of utilities: from the <span><b>sed</b></span>, <span><b>awk</b></span> and <span><b>find</b></span> to Perl translators in <code class="filename">x2p/</code>, to the various utilities such as <code class="filename">h2xs</code> and <code class="filename">perldoc</code> in <code class="filename">utils/</code>.
</p>
</div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="Documentation"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=28" title="Edit section: Documentation">edit</a>]</span> <span class="mw-headline"> Documentation </span></h2>
</div></div></div>
<p>The POD documentation that ships with Perl lives in <code class="filename">pod/</code>, along with some of the utilities for manipulating POD documents.
</p>
</div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="Summary_2"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=29" title="Edit section: Summary">edit</a>]</span> <span class="mw-headline"> Summary </span></h2>
</div></div></div>
<p>We've examined the layout of the Perl source as well as an overview of the Perl interpreter. Perl runs programs in two stages: firstly reading in the source and using the tokeniser and parser to "understand" it, and then running over a series of operations to execute the program.
</p>
</div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="Exercises_2"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=30" title="Edit section: Exercises">edit</a>]</span> <span class="mw-headline"> Exercises </span></h2>
</div></div></div>
<div class="orderedlist">
<ol><li> What and where is the function that implements the <code class="literal">tr///</code> operator? Be as precise as you can.
</li><li> How does the way Perl executes a program different from the way the Unix shell executes one? Contrast shell, Perl, Java and C.
</li><li> Without looking, where do you think the <code class="function">Perl_keyword</code> function would be? Find it, and explain what it does.
</li><li> Several files in the Perl source tree are generated from other files. Look at all the <code class="filename">*.pl</code> files in the root of the Perl source tree, and find out what each file is responsible for generating, and from what sources. Be extremely careful when looking at <code class="filename">embed.pl</code>.
</li></ol>
<a name="Internal_Variables"></a><h1><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=31" title="Edit section: Internal Variables">edit</a>]</span> <span class="mw-headline"> Internal Variables </span></h1>
<p>Perl's variables are a lot more flexible than C's - C is a <i>strongly-typed</i> language, whereas Perl is weakly typed. This means that Perl's variables may be used as strings, as integers, as floating point values, at will.
</p><p>Hence, when we're representing values inside Perl, we need to implement some special types. This chapter will examine how scalars, arrays and hashes are represented inside the interpreter.
</p>
<a name="Basic_SVs"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=32" title="Edit section: Basic SVs">edit</a>]</span> <span class="mw-headline"> Basic SVs </span></h2>
<p><span class="type">SV</span> stands for <i>Scalar Value</i>, and it's the basic form of representing a scalar. There are several different types of SV, but all of them have certain features in common.
</p>
<a name="Basics_of_an_SV"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=33" title="Edit section: Basics of an SV">edit</a>]</span> <span class="mw-headline"> Basics of an SV </span></h3>
</div></div></div>
<p>Let's take a look at the definition of the <span class="type">SV</span> type, in <code class="filename">sv.h</code> in the Perl core:
</p>
<pre>struct STRUCT_SV {
    void*   sv_any;     /* pointer to something */
    U32     sv_refcnt;  /* how many references to us */
    U32     sv_flags;   /* what we are */
	};
</pre>
<p>Every scalar, array and hash that Perl knows about has these three fields: "something", a reference count, and a set of flags. Let's examine these separately:
</p>
<div class="sect3" lang="en"><div class="titlepage"><div><div>
<a name="sv_any"></a><h4><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=34" title="Edit section: sv_any">edit</a>]</span> <span class="mw-headline"> <code class="varname">sv_any</code> </span></h4>
</div></div></div>
<p>This field allows us to connect another structure to the SV. This is the mechanism by which we can change between representing an integer, a string, and so on. The function inside the Perl core which does the change is called <code class="function">sv_upgrade</code>.
</p><p>As its name implies, this changing is a one-way process; there is no corresponding <code class="function">sv_downgrade</code>. This is for efficiency: we don't want to be switching types every time an SV is used in a different context, first as a number, then a string, then a number again and so on.
</p><p>Hence the structures we will meet get progressively more complex, building on each other: we will see an integer type, a string type, and then a type which can hold both a string and an integer, and so on.
</p>
</div><div class="sect3" lang="en"><div class="titlepage"><div><div>
<a name="Reference_Counts"></a><h4><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=35" title="Edit section: Reference Counts">edit</a>]</span> <span class="mw-headline"> Reference Counts </span></h4>
</div></div></div>
<p>Perl uses <i>reference counts</i> to determine when values are no longer used. For instance, consider the following two pieces of code:
</p>
<pre>{
  my $a;
  $a = 3;
}
</pre>
<p>Here, the integer value 3, an SV, is assigned to a variable. Remember that variables are simply names for values: if we look up <code class="varname">$a</code>, we find the value 3. Hence, <code class="varname">$a</code> <span class="emphasis"><i>refers to</i></span> the value. At this point, the value has a reference count of 1.
</p><p>At the closing brace, the variable <code class="varname">$a</code> goes out of scope; that is to say, the name is destroyed, and the reference to the value 3 is broken. The value's reference count therefore decreases, becoming zero.
</p><p>Once an SV has a reference count of zero, it is no longer in use and its memory can be freed.
</p><p>Now our second piece of code:
</p>
<pre>my $b;
{
  my $a;
  $a = 3;
  $b = \$a;
}
</pre>
<p>In this case, once we assign a reference to the value into <code class="varname">$b</code>, the reference count of our value (the integer 3) increases to 2, as now two variables are able to reach the value.
</p><p>When the scope ends, the value's reference count decreases as before because <code class="varname">$a</code> no longer refers to it. However, even though one name is destroyed, another name, <code class="varname">$b</code>, still refers to the value - hence, the resulting reference count is now 1.
</p><p>Once the variable <code class="varname">$b</code> goes out of scope, or a different value is assigned to it, the reference count will fall to zero and the SV will be freed.
</p>
</div><div class="sect3" lang="en"><div class="titlepage"><div><div>
<a name="Flags"></a><h4><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=36" title="Edit section: Flags">edit</a>]</span> <span class="mw-headline"> Flags </span></h4>
</div></div></div>
<p>The final field in the SV structure is a flag field. The most important flags are stored in the bottom two bits, which are used to hold the SV's type - that is, the type of structure which is being attached to the <code class="varname">sv_any</code> field.
</p><p>The second most important flags are those which tell us how much of the information in the structure is relevant. For instance, we previously mentioned that one of the structures can hold both an integer and a string. We could also say that it has an integer "slot" and a string "slot". However, if we alter the value in the integer slot, Perl does not change the value in the string slot; it simply unsets the flag which says that we may use the contents of that slot:
</p>
<pre>$a = 3;            # Type: Integer            | Flags: Can use integer
... if $a eq "3";  # Type: Integer and String | Flags: Can use integer,
                                              |        can use string
$a++;              # Type: Integer and String | Flags: Can use integer

</pre>
<div class="sidebar">
<p><b>Retrieving and setting flags</b>
</p><p>You can get at an SV's flags using the <code class="function">SvFLAGS(sv)</code> macro. This is lvaluable: that is to say, you can write
</p>
<pre>SvFLAGS(sv) |= SVf_UTF8;

</pre>
<p>to turn on the <code class="literal">UTF8</code> flag. However, there are macros in <code class="filename">sv.h</code> for testing and setting flags; for instance, the above is more clearly and frequently written
</p>
<pre>SvUTF8_on(sv);

</pre>
<p>As mentioned above, the type of the SV is encoded in its flags. Use <code class="function">SvTYPE(sv)</code> to get at this, and compare the result with the values of the <code class="varname">svtype</code> enum in <code class="filename">sv.h</code>.
</p>
</div>
<p>We'll see more detailed examples of this later on. First, though let's examine the various types that can be stored in an SV.
</p>
</div></div><div class="sect2" lang="en"><div class="titlepage"><div><div>
<a name="References"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=37" title="Edit section: References">edit</a>]</span> <span class="mw-headline"> References </span></h3>
</div></div></div>
<p>A reference, or <span class="type">RV</span>, is simply a C pointer to another SV, as its definition shows:
</p>
<pre>struct xrv {
    SV *    xrv_rv;     /* pointer to another SV */
}
</pre>
<p><font color="red">&lt;advanced&gt;
</p><p>Hence, the Perl statement <b><code>$a = \$b</code></b> is equivalent to the C statements:
</p>
<pre>sv_upgrade(a, SVt_RV); /* Make sure a is an RV */
a-&gt;sv_any-&gt;xrv_rv = b;

</pre>
<p>However, the SV fields are hidden behind macros, so an XS programmer or porter would write the above as:
</p>
<pre>sv_upgrade(a, SVt_RV); /* Make sure a is an RV */
SvRV(a) = b;
</pre>
&lt;/advanced&gt;</font><div class="sidebar">
<p><b>Functions for manipulating references</b>
</p><p>You may create a reference at the C level using <code class="function">newRV_inc((SV*) thing)</code> or <code class="function">newRV_noinc((SV*) thing)</code>; the <code class="function">_noinc</code> form does not increase the reference count - use with caution!
</p><p>As seen above, <code class="function">SvRV(rv)</code> dereferences the RV; be sure to cast it into the appropriate type (<span class="type">SV*</span>, <span class="type">AV*</span>, <span class="type">HV*</span>) before doing anything with it. You can check the type using <code class="function">SvTYPE(SvRV(rv))</code> as expected.
</p>
</div></div><div class="sect2" lang="en"><div class="titlepage"><div><div>
<a name="Integers"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=38" title="Edit section: Integers">edit</a>]</span> <span class="mw-headline"> Integers </span></h3>
</div></div></div>
<p>Perl's integer type is not necessarily a C <span class="type">int</span>; it's called an <span class="type">IV</span>, or <i>Integer Value</i>. The difference is that an IV is guaranteed to hold a pointer.
</p><p><font color="red">&lt;advanced&gt;
</p><p>Perl uses the macros <code class="function">PTR2INT</code> and <code class="function">INT2PTR</code> to convert between pointers and IVs. The size guarantee means that, for instance, the following code will produce an IV:
</p>
<pre>	      $a = \1;
	      $a--;    # Reference (pointer) converted to an integer

</pre>
<p>&lt;/advanced&gt;</font>
</p><p>Let's now have a look at an SV structure containing an IV: the <span class="type">SvIV</span> structure. The core module <code class="classname">Devel::Peek</code> allows us to examine a value from the C perspective:
</p>
<div class="screenco">
<pre><code class="prompt">%</code> <b><code>perl  -MDevel::Peek -le '$a=10; Dump($a)'</code></b>
SV = IV(0x81559b0) at 0x81584f0
  REFCNT = 1
  FLAGS = (IOK,pIOK)
  IV = 10


</pre>
<div class="calloutlist">
<table summary="Callout list">
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc1.png" class="image" title="1"><img alt="1" longdesc="/index.php/Image:Cc1.png" src="/images/6/66/Cc1.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>The first line tells us that this SV is of type <span class="type">SvIV</span>. The SV has a memory location of <code class="literal">0x814584f0</code>, and <code class="varname">sv_any</code> points to an IV at memory location <code class="literal">0x81559b0</code>.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc2.png" class="image" title="2"><img alt="2" longdesc="/index.php/Image:Cc2.png" src="/images/9/9a/Cc2.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>The value has only one reference to it at the moment, the fact that it is stored in <code class="varname">$a</code>.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc3.png" class="image" title="3"><img alt="3" longdesc="/index.php/Image:Cc3.png" src="/images/6/60/Cc3.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p><code class="classname">Devel::Peek</code> converts the flags from a simple integer to a symbolic form: it tells us that the <code class="literal">IOK</code> and <code class="literal">pIOK</code> flags are set. <code class="literal">IOK</code> means that the value in the IV slot is OK to be used.
</p><p><font color="red">&lt;advanced&gt;
</p><p>What about <code class="literal">pIOK</code>? <code class="literal">pIOK</code> means that the IV slot represents the underlying ("p" for "private") data. If, for instance, the SV is tied, then we may not use the "10" that is in the IV slot - we must call the appropriate <code class="literal">FETCH</code> routine to get the value - so <code class="literal">IOK</code> is not set. The "10", however, is private data, only available to the tying mechanism, so <code class="literal">pIOK</code> is set.
</p><p>&lt;/advanced&gt;</font>
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc4.png" class="image" title="4"><img alt="4" longdesc="/index.php/Image:Cc4.png" src="/images/0/08/Cc4.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>This shows the IV slot with its value, the "10" which we assigned to <code class="varname">$a</code>'s SV.
</p>
</td></tr></table>
</div></div>
<p><font color="red">&lt;advanced&gt;
</p><p>There's also a sub-type of IVs called <span class="type">UV</span>s which Perl uses where possible; these are the unsigned counterparts of IVs. The flag <code class="literal">IsUV</code> is used to signal that a value in an IV slot is actually an unsigned value.
</p>
&lt;/advanced&gt;</font><div class="sidebar">
<p><b>Functions for manipulating <span class="type">SvIV</span>s.</b>
</p><p>You can create a new integer SV with the function <code class="function">newSViv(IV foo)</code>.
</p><p>To get the integer value of an SV, the <code class="function">SvIV(sv)</code> macro will first ensure that the scalar has a valid IV slot, converting it if necessary, and then return the value of that slot. To change the integer value of an existing SV, use <code class="function">sv_setiv(sv, iv)</code>.
</p><p>The <code class="function">SvIOK(sv)</code> macro can be used to check whether or not a given SV has a valid IV slot.
</p><p>You should note at this point that if you title-case the type of SV (we've seen <code class="literal">Sv</code>, and we'll also see <code class="literal">Av</code>, <code class="literal">Hv</code> referring to unique properties of those types) and then add the names of the fields produced in the <code class="function">Devel::Peek::Dump</code> dump, (<code class="literal">FLAGS</code>, <code class="literal">REFCNT</code>, <code class="literal">IV</code>) you obtain a macro that can be used from C to retrieve that property: <code class="function">SvFLAGS</code>, <code class="function">SvREFCNT</code> and so on.
</p>
</div></div><div class="sect2" lang="en"><div class="titlepage"><div><div>
<a name="Strings"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=39" title="Edit section: Strings">edit</a>]</span> <span class="mw-headline"> Strings </span></h3>
</div></div></div>
<p>The next class we'll look at are strings. We can't call them "String Values", because the SV abbreviation is already taken; instead, remembering that a string is a pointer to an array of characters, and that the entry in the string slot is going to be that pointer, we call strings "<span class="type">PV</span>s": <i>Pointer Values</i>
</p><p>It's here that we start to see combination types: as well as the <span class="type">SvPV</span> type, we have a <span class="type">SvPVIV</span> which has string and integer slots.
</p><p>Before we get into that, though, let us examine the <span class="type">SvPV</span> structure, again from <code class="filename">sv.h</code>: 
</p>
<pre>struct xpv {
    char *  xpv_pv;     /* pointer to malloced string */
    STRLEN  xpv_cur;    /* length of xpv_pv as a C string */
    STRLEN  xpv_len;    /* allocated size */
};

</pre>
<p>C's strings have a fixed size, but Perl must dynamically resize its strings whenever the data going into the string exceeds the currently allocated size. Hence, Perl holds both the length of the current contents and the maximum length available before a resize must occur. As with SVs, allocated memory for a string only increases, as the following example shows:
</p>
<div class="screenco">
<pre><code class="prompt">%</code> <b><code>perl -MDevel::Peek -le '$a="abc"; Dump($a);print;  $a="abcde"; Dump($a);print; $a="a"; Dump($a)'</code></b>
SV = PV(0x814ee44) at 0x8158520
  REFCNT = 1
  FLAGS = (POK,pPOK)
  PV = 0x815c548 "abc"\0
  CUR = 3
  LEN = 4

SV = PV(0x814ee44) at 0x8158520
  REFCNT = 1
  FLAGS = (POK,pPOK)
  PV = 0x815c548 "abcde"\0
  CUR = 5
  LEN = 6

SV = PV(0x814ee44) at 0x8158520
  REFCNT = 1
  FLAGS = (POK,pPOK)
  PV = 0x815c548 "a"\0
  CUR = 1
  LEN = 6
</pre>
<div class="calloutlist">
<table summary="Callout list">
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc1.png" class="image" title="1"><img alt="1" longdesc="/index.php/Image:Cc1.png" src="/images/6/66/Cc1.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>This time, we have a SV whose <code class="varname">sv_any</code> points to an <span class="type">SvPV</span> structure at address <code class="literal">0x814ee44</code>
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc2.png" class="image" title="2"><img alt="2" longdesc="/index.php/Image:Cc2.png" src="/images/9/9a/Cc2.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>The actual pointer, the string, lives at address <code class="literal">0x815c548</code>, and contains the text <code class="literal">"abc"</code>. As this is an ordinary C string, it's terminated with a null character.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc3.png" class="image" title="3"><img alt="3" longdesc="/index.php/Image:Cc3.png" src="/images/6/60/Cc3.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>x <code class="varname">SvCUR</code> is the length of the string, as would be returned by <code class="function">strlen</code>. In this case, it is 3 - the null terminator is not counted.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc4.png" class="image" title="4"><img alt="4" longdesc="/index.php/Image:Cc4.png" src="/images/0/08/Cc4.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>However, it is counted for the purposes of allocation: we have allocated 4 bytes to store the string, as reflected by <code class="varname">SvLEN</code>.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc5.png" class="image" title="5"><img alt="5" longdesc="/index.php/Image:Cc5.png" src="/images/f/f0/Cc5.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>So what happens if we lengthen the string? As the new length is more than the available space, we need to extend the string. <font color="red">&lt;advanced&gt;</font>
</p><p>The macro <code class="function">SvGROW</code> is responsible for extending strings to a specified length. It's defined in terms of the function <code class="function">sv_grow</code> which takes care of memory reallocation:
</p>
<pre>#define SvGROW(sv,len) (SvLEN(sv) &lt; (len) ? sv_grow(sv,len) :
 		    SvPVX(sv))
</pre>
<p>&lt;/advanced&gt; After growing the string to accomodate the new value, the value is assigned and the <code class="varname">CUR</code> and <code class="varname">LEN</code> information updated. As you can see, the SV and the SvPV structures stay at the same address, and, in this case, the string pointer itself has remained at the same address.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc6.png" class="image" title="6"><img alt="6" longdesc="/index.php/Image:Cc6.png" src="/images/0/09/Cc6.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>And what if we shrink the string? Perl does not give up any memory: you can see that <code class="varname">LEN</code> is the same as it was before. Perl does this for efficiency: if it reallocated storage every time a string changed length, it would spent most of its time in memory management!
</p>
</td></tr></table>
</div></div>
<p>Now let's see what happens if we use a value as number and string, taking the example in [#var.flagsdemo the section called “Flags”]: 
</p>
<div class="screenco">
<pre><code class="prompt">%</code> <b><code>perl -Ilib -MDevel::Peek -le '$a=3; Dump($a);print;  $a eq "3"; Dump($a);print; $a++; Dump($a)'</code></b>
SV = IV(0x81559d8) at 0x8158518
  REFCNT = 1
  FLAGS = (IOK,pIOK)
  IV = 3

SV = PVIV(0x814f278) at 0x8158518
  REFCNT = 1
  FLAGS = (IOK,POK,pIOK,pPOK)
  IV = 3
  PV = 0x8160350 "3"\0
  CUR = 1
  LEN = 2

SV = PVIV(0x814f278) at 0x8158518
  REFCNT = 1
  FLAGS = (IOK,pIOK)
  IV = 4
  PV = 0x8160350 "3"\0
  CUR = 1
  LEN = 2
</pre>
</div><div class="calloutlist">
<table summary="Callout list">
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc1.png" class="image" title="1"><img alt="1" longdesc="/index.php/Image:Cc1.png" src="/images/6/66/Cc1.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>In order to perform the string comparison, Perl needs to get a string value. It calls <code class="function">SvPV</code>, the ordinary macro for getting the string value from an SV. PV notices that we don't have a valid PV slot, so upgrades the SV to a <span class="type">SvPVIV</span>. It also converts the number "3" to a string representation, and sets <code class="varname">CUR</code> and <code class="varname">LEN</code> appropriately. Because the values in both the IV and PV slots are available for use, both IOK and POK flags are turned on.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc2.png" class="image" title="2"><img alt="2" longdesc="/index.php/Image:Cc2.png" src="/images/9/9a/Cc2.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>When we change the integer value of the SV by incrementing it by one, Perl updates the value in the IV slot. Since the value in the PV slot is invalidated, the POK flag is turned off. Perl does not remove the value from the PV slot, nor does it downgrade to an SvIV because we may use the SV as a string again at a later time.
</p>
</td></tr></table>
</div><font color="red">&lt;advanced&gt;
<p>There's one slight twist here: if you ask Perl to remove some characters from the beginning of the string, it performs a (rather ugly) optimization called "The Offset Hack". It stores the number of characters to remove (the offset) in the IV slot, and turns on the <code class="literal">OOK</code> (offset OK) flag. The pointer of the PV is advanced by the offset, and the <code class="varname">CUR</code> and <code class="varname">LEN</code> fields are decreased by that many. As far as C is concerned the string starts at the new position; it's only when the memory is being released that the real start of the string is important.
</p>
&lt;/advanced&gt;</font><div class="sidebar">
<p><b>Functions for manipulating strings</b>
</p><p>To create a <span class="type">SvPV</span> from an ordinary string, use either <code class="function">newSVpvn(char*, STRLEN)</code> or <code class="function">newSVpvf(char* format, ...)</code> for <code class="function">sprintf</code>-like formatting. <code class="function">sv_setpvn(sv, char*, STRLEN)</code> and <code class="function">sv_setpvf(sv, char* format, ...)</code> can be used to alter the string value of an SV. Analogous functions <code class="function">sv_catpvn</code> etc. add to the end of the string.
</p><p>As mentioned above, <span class="type">SvPV(sv)</span> will return the string value, converting the SV to something which has a valid PV if necessary.
</p>
</div></div><div class="sect2" lang="en"><div class="titlepage"><div><div>
<a name="Floating_point_numbers"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=40" title="Edit section: Floating point numbers">edit</a>]</span> <span class="mw-headline"> Floating point numbers </span></h3>
</div></div></div>
<p>Finally, we have floating point types, or <span class="type">NV</span>s: <i>Numeric Values</i>. Like <span class="type">IV</span>s, <span class="type">NV</span>s are guaranteed to be able to hold a pointer. The <span class="type">SvNV</span> structure is very like the corresponding <span class="type">SvIV</span>: 
</p>
<pre><code class="prompt">%</code> <b><code>perl -MDevel::Peek -le '$a=0.5; Dump($a);'</code></b>
SV = NV(0x815d058) at 0x81584e8
  REFCNT = 1
  FLAGS = (NOK,pNOK)
  NV = 0.5
</pre>
<p>However, the combined structure, <span class="type">SvPVNV</span> has slots for floats, integers and strings:
</p>
<pre><code class="prompt">%</code> <b><code>perl -MDevel::Peek -le '$a="1"; $a+=0.5; Dump($a);'</code></b>
SV = PVNV(0x814f9c0) at 0x81584f0
  REFCNT = 1
  FLAGS = (NOK,pNOK)
  IV = 0
  NV = 1.5
  PV = 0x815b5c0 "1"\0
  CUR = 1
  LEN = 2
</pre>
<div class="sidebar">
<p><b>Functions for manipulating <span class="type">NV</span>s</b>
</p><p>By now, you should be able to guess the functions needed for manipulating <span class="type">NV</span>s: <code class="function">SvNV(sv)</code> will return the NV, converting if necessary; <code class="function">sv_newSVnv(float)</code> will create a new <span class="type">SvNV</span>; <code class="function">sv_setnv(sv, float)</code> will change the NV.
</p>
</div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="Arrays_and_Hashes"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=41" title="Edit section: Arrays and Hashes">edit</a>]</span> <span class="mw-headline"> Arrays and Hashes </span></h2>
</div></div></div>
<p>Now we've looked at the most common types of scalar, (there are a few complications, which we'll cover in [#var.complex the section called “More Complex Types”]) let's examine array and hash structures. These, too, are build on top of the basic SV structure, with reference counts and flags, and structures hung off <code class="varname">sv_any</code>.
</p>
<div class="sect2" lang="en"><div class="titlepage"><div><div>
<a name="Arrays"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=42" title="Edit section: Arrays">edit</a>]</span> <span class="mw-headline"> Arrays </span></h3>
</div></div></div>
<p>Arrays are known in the core as <span class="type">AV</span>s. Their structure can be found in <code class="filename">av.h</code>: 
</p>
<pre>struct xpvav {
    char*   xav_array;  /* pointer to first array element */
    SSize_t xav_fill;   /* Index of last element present */
    SSize_t xav_max;    /* max index for which array has space */
    IV      xof_off;    /* ptr is incremented by offset */
    NV      xnv_nv;     /* numeric value, if any */
    MAGIC*  xmg_magic;  /* magic for scalar array */
    HV*     xmg_stash;  /* class package */
    SV**    xav_alloc;  /* pointer to malloced string */
    SV*     xav_arylen;
    U8      xav_flags;
};
</pre>
<p>We're going to skip over <code class="varname">xmg_magic</code> and <code class="varname">xmg_stash</code> for now, and come back to them in [#var.complex the section called “More Complex Types”].
</p><p>Let's use <code class="classname">Devel::Peek</code> as before to examine the AV, but we must remember that we can only give one argument to <code class="function">Devel::Peek::Dump</code>; hence, we must pass it a reference to the AV: 
</p>
<div class="screenco">
<pre><code class="prompt">%</code> <b><code>perl -MDevel::Peek -e '@a=(1,2,3); Dump(\@a)'</code></b>
SV = RV(0x8106ce8) at 0x80fb380      <a href="/index.php/Image:Cc1.png" class="image" title="1"><img alt="1" longdesc="/index.php/Image:Cc1.png" src="/images/6/66/Cc1.png" width="12" height="12" /></a>
  REFCNT = 1
  FLAGS = (TEMP,ROK)
  RV = 0x8105824
  SV = PVAV(0x8106cb4) at 0x8105824  <a href="/index.php/Image:Cc2.png" class="image" title="2"><img alt="2" longdesc="/index.php/Image:Cc2.png" src="/images/9/9a/Cc2.png" width="12" height="12" /></a>
    REFCNT = 2
    FLAGS = ()
    IV = 0
    NV = 0
    ARRAY = 0x80f7de8                <a href="/index.php/Image:Cc3.png" class="image" title="3"><img alt="3" longdesc="/index.php/Image:Cc3.png" src="/images/6/60/Cc3.png" width="12" height="12" /></a>
    FILL = 2                         <a href="/index.php/Image:Cc4.png" class="image" title="4"><img alt="4" longdesc="/index.php/Image:Cc4.png" src="/images/0/08/Cc4.png" width="12" height="12" /></a>
    MAX = 3                          <a href="/index.php/Image:Cc5.png" class="image" title="5"><img alt="5" longdesc="/index.php/Image:Cc5.png" src="/images/f/f0/Cc5.png" width="12" height="12" /></a>
    ARYLEN = 0x0                     <a href="/index.php/Image:Cc6.png" class="image" title="6"><img alt="6" longdesc="/index.php/Image:Cc6.png" src="/images/0/09/Cc6.png" width="12" height="12" /></a>
    FLAGS = (REAL)                   <a href="/index.php/Image:Cc7.png" class="image" title="7"><img alt="7" longdesc="/index.php/Image:Cc7.png" src="/images/4/45/Cc7.png" width="12" height="12" /></a>
    Elt No. 0
    SV = IV(0x80fc1f4) at 0x80f1460  <a href="/index.php/Image:Cc8.png" class="image" title="8"><img alt="8" longdesc="/index.php/Image:Cc8.png" src="/images/e/e6/Cc8.png" width="12" height="12" /></a>
      REFCNT = 1
      FLAGS = (IOK,pIOK,IsUV)
      UV = 1
    Elt No. 1
    SV = IV(0x80fc1f8) at 0x80f1574
      REFCNT = 1
      FLAGS = (IOK,pIOK,IsUV)
      UV = 2
    Elt No. 2
    SV = IV(0x80fc1fc) at 0x80f1370
      REFCNT = 1
      FLAGS = (IOK,pIOK,IsUV)
      UV = 3
</pre>
<div class="calloutlist">
<table summary="Callout list">
<tr>
<td width="5%" align="left" valign="top">
<p>[#var.av.1 <a href="/index.php/Image:Cc1.png" class="image" title="1"><img alt="1" longdesc="/index.php/Image:Cc1.png" src="/images/6/66/Cc1.png" width="12" height="12" /></a>]
</p>
</td><td align="left" valign="top">
<p>We're dumping the reference to the array, which is, as you would expect, an RV.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p>[#var.av.2 <a href="/index.php/Image:Cc2.png" class="image" title="2"><img alt="2" longdesc="/index.php/Image:Cc2.png" src="/images/9/9a/Cc2.png" width="12" height="12" /></a>]
</p>
</td><td align="left" valign="top">
<p>The RV contains a pointer to another SV: this is our array; the <code class="function">Dump</code> function helpfully calls itself recursively on the pointer.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p>[#var.av.3 <a href="/index.php/Image:Cc3.png" class="image" title="3"><img alt="3" longdesc="/index.php/Image:Cc3.png" src="/images/6/60/Cc3.png" width="12" height="12" /></a>]
</p>
</td><td align="left" valign="top">
<p>The AV contains a pointer to a C array of SVs. Just like a string, this array must be able to change its size; in fact, the expansion and contaction of AVs is just the same as that of strings.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p>[#var.av.4 <a href="/index.php/Image:Cc4.png" class="image" title="4"><img alt="4" longdesc="/index.php/Image:Cc4.png" src="/images/0/08/Cc4.png" width="12" height="12" /></a>]
</p>
</td><td align="left" valign="top">
<p>To facilitate this, <code class="varname">FILL</code> is the highest index in the array. This is usually equivalent to <code class="varname">$#array</code>.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p>[#var.av.5 <a href="/index.php/Image:Cc5.png" class="image" title="5"><img alt="5" longdesc="/index.php/Image:Cc5.png" src="/images/f/f0/Cc5.png" width="12" height="12" /></a>]
</p>
</td><td align="left" valign="top">
<p><code class="varname">MAX</code> is the maximum allocated size of the array; if <code class="varname">FILL</code> has to become more than <code class="varname">MAX</code>, the array is grown with <code class="function">av_extend</code>.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p>[#var.av.6 <a href="/index.php/Image:Cc6.png" class="image" title="6"><img alt="6" longdesc="/index.php/Image:Cc6.png" src="/images/0/09/Cc6.png" width="12" height="12" /></a>]
</p>
</td><td align="left" valign="top">
<p>We said that <code class="varname">FILL</code> was usually equivalent to <code class="varname">$#array</code>, but the exact equivalent is <code class="varname">ARYLEN</code>. This is an SV that is created on demand - that is, whenever <code class="varname">$#array</code> is read. Since we haven't read <code class="varname">$#array</code> in our example, it's currently a null pointer. The distinction between <code class="varname">FILL</code> and <code class="varname">$#array</code> is important when an array is tied.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p>[#var.av.7 <a href="/index.php/Image:Cc7.png" class="image" title="7"><img alt="7" longdesc="/index.php/Image:Cc7.png" src="/images/4/45/Cc7.png" width="12" height="12" /></a>]
</p>
</td><td align="left" valign="top">
<p>The <code class="literal">REAL</code> flag is set on "real" arrays; these are arrays which reference count their contents. Arrays such as <code class="varname">@_</code> and the scratchpad arrays (see below) are fake, and do not bother reference counting their contents as an efficiency hack.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p>[#var.av.8 <a href="/index.php/Image:Cc8.png" class="image" title="8"><img alt="8" longdesc="/index.php/Image:Cc8.png" src="/images/e/e6/Cc8.png" width="12" height="12" /></a>]
</p>
</td><td align="left" valign="top">
<p><code class="function">Devel::Peek::Dump</code> shows us some of the elements of the array; these are ordinary SVs.
</p>
</td></tr></table>
</div></div><font color="red">&lt;advanced&gt;
<p>Something similar to the offset hack is performed on AVs to enable efficient shifting and splicing off the beginning of the array; while <code class="varname">AvARRAY</code> (<code class="varname">xav_array</code> in the structure) points to the first element in the array that is visible from Perl, <code class="varname">AvALLOC</code> (<code class="varname">xav_alloc</code>) points to the real start of the C array. These are usually the same, but a shift operation can be carried out by increasing <code class="varname">AvARRAY</code> by one and decreasing <code class="varname">AvFILL</code> and <code class="varname">AvLEN</code>. Again, the location of the real start of the C array only comes into play when freeing the array. See <code class="function">av_shift</code> in <code class="filename">av.c</code>.
</p>
&lt;/advanced&gt;</font><div class="sidebar">
<p><b>Functions for manipulating arrays</b>
</p><p>You can create a new array simply with the <code class="function">newAV</code> macro. <code class="function">AvARRAY(av)</code> will return the underlying C array of SVs; <code class="function">av_len</code> returns the index of the highest element, and <code class="function">av_fill(av, index)</code> can be used to ensure that an array is grown to at least the size of <code class="varname">index</code>.
</p><p>For more array manipulation functions, see <code class="filename">perlapi</code> in the Perl documentation, or <i>Using Perl and C</i> by Tim Jenness and Simon Cozens.
</p>
</div></div><div class="sect2" lang="en"><div class="titlepage"><div><div>
<a name="Hashes"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=43" title="Edit section: Hashes">edit</a>]</span> <span class="mw-headline"> Hashes </span></h3>
</div></div></div>
<p>Hashes are represented in the core as, you guessed it, <span class="type">HV</span>s. Before we look at how this is implemented, we'll first see what a hash actually is...
</p>
<div class="sect3" lang="en"><div class="titlepage"><div><div>
<a name="What_is_a_.22hash.22_anyway.3F"></a><h4><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=44" title="Edit section: What is a &quot;hash&quot; anyway?">edit</a>]</span> <span class="mw-headline"> What is a "hash" anyway? </span></h4>
</div></div></div>
<p>A hash is actually quite a clever data structure: it's a combination of an array and a linked list. Here's how it works:
</p>
<div class="orderedlist">
<ol><li> The hash key undergoes a transformation to turn it into a number called, confusingly, the <i>hash value</i>. For Perl, the C code that does the transformation looks like this: (from <code class="filename">hv.h</code>)
</li></ol>
<pre>    register const char *s_PeRlHaSh = str;
    register I32 i_PeRlHaSh = len;
    register U32 hash_PeRlHaSh = 0;
    while (i_PeRlHaSh--) {
        hash_PeRlHaSh += *s_PeRlHaSh++;
        hash_PeRlHaSh += (hash_PeRlHaSh &lt;&lt; 10);
        hash_PeRlHaSh ^= (hash_PeRlHaSh &gt;&gt; 6);
    }
    hash_PeRlHaSh += (hash_PeRlHaSh &lt;&lt; 3);
    hash_PeRlHaSh ^= (hash_PeRlHaSh &gt;&gt; 11);
    (hash) = (hash_PeRlHaSh += (hash_PeRlHaSh &lt;&lt; 15));

</pre>
<p>Converting that to Perl and tidying it up:
</p>
<pre>    sub hash {
        my $string = shift;
        my $hash;
        for (map {ord $_} split //, $string) {
             $hash += $_; $hash += $hash &lt;&lt; 10; $hash ^= $hash &gt;&gt; 6;
        }
        $hash += $hash &lt;&lt; 3; $hash ^= $hash &gt;&gt; 1;
        return ($hash + $hash &lt;&lt; 15);
    }

</pre>
<ol><li> This hash is distributed across an array using the modulo operator. For instance, if our array has 8 elements, ("Hash buckets") we'll use <b><code> $hash_array[$hash % 8] </code></b>
</li><li> Each bucket contains a linked list; adding a new entry to the hash appends an element to the linked list. So, for instance, <b><code>$hash{"red"}="rouge"</code></b> is implemented similar to
</li></ol>
<pre>    push @{$hash-&gt;[hash("red") % 8]},
        { key   =&gt; "red",
          value =&gt; "rouge",
          hash  =&gt; hash("red")
        };
</pre>
<p><font color="red">&lt;advanced&gt;
Why do we store the key as well as the hash value in the linked list? The hashing function may not be perfect - that is to say, it may generate the same value for <code class="literal">"red"</code> as it would for, say, <code class="literal">"blue"</code>. This is called a <i>hash collision</i>, and, while it is rare in practice, it explains why we can't depend on the hash value alone.
&lt;/advanced&gt;</font>
</p>
</div>
<p>As usual, a picture speaks a thousand words: <span class="inlinemediaobject"><a href="/index.php/Image:Hashing.gif" class="image" title="Guess you need to redraw this anyway"><img alt="Guess you need to redraw this anyway" longdesc="/index.php/Image:Hashing.gif" src="/images/6/62/Hashing.gif" width="612" height="179" /></a></span>
</p>
</div><div class="sect3" lang="en"><div class="titlepage"><div><div>
<a name="Hash_Entries"></a><h4><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=45" title="Edit section: Hash Entries">edit</a>]</span> <span class="mw-headline"> Hash Entries </span></h4>
</div></div></div>
<p>Hashes come in two parts: the <span class="type">HV</span> is the actual array containing the linked lists, and is very similar to an AV; the things that make up the linked lists are <i>hash entry</i> structures, or <span class="type">HE</span>s. From <code class="filename">hv.h</code>: 
</p>
<pre>/* entry in hash value chain */
struct he {
    HE      *hent_next; /* next entry in chain */
    HEK     *hent_hek;  /* hash key */
    SV      *hent_val;  /* scalar value that was hashed */
};

/* hash key -- defined separately for use as shared pointer */
struct hek {
    U32     hek_hash;   /* hash of key */
    I32     hek_len;    /* length of hash key */
    char    hek_key[1]; /* variable-length hash key */
};
</pre>
<p>As you can see from the above, we simplified slightly when we put the hash key in the buckets above: the key and the hash value are stored in a separate structure, a <span class="type">HEK</span>.
</p><p>The <span class="type">HEK</span> stored inside a hash entry represents the key: it contains the hash value and the key itself. It's stored separately so that Perl can share identical keys between different hashes - this saves memory and also saves time calcu.llating the hash value. You can use the macros <code class="function">HeHASH(he)</code> and <code class="function">HeKEY(he)</code> to retrieve the hash value and the key from a <span class="type">HE</span>.
</p>
</div><div class="sect3" lang="en"><div class="titlepage"><div><div>
<a name="Hash_arrays"></a><h4><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=46" title="Edit section: Hash arrays">edit</a>]</span> <span class="mw-headline"> Hash arrays </span></h4>
</div></div></div>
<p>Now to turn to the <span class="type">HV</span>s themselves, the arrays which hold the linked lists of <span class="type">HE</span>s. As we mentioned, these are not too dissimilar from <span class="type">AV</span>s.
</p>
<div class="screenco">
<pre><code class="prompt">%</code> <b><code>perl -MDevel::Peek -e '%a = (red =&gt; "rouge", blue =&gt; "bleu"); Dump(\%a);'</code></b>
SV = RV(0x8106c80) at 0x80f1370
  REFCNT = 1
  FLAGS = (TEMP,ROK)
  RV = 0x81057a0
  SV = PVHV(0x8108328) at 0x81057a0
    REFCNT = 2
    FLAGS = (SHAREKEYS)
    IV = 2
    NV = 0
    ARRAY = 0x80f7748  (0:6, 1:2)
    hash quality = 150.0%
    KEYS = 2
    FILL = 2
    MAX = 7
    RITER = -1
    EITER = 0x0
    Elt "blue" HASH = 0x8a5573ea
    SV = PV(0x80f17b0) at 0x80f1574
      REFCNT = 1
      FLAGS = (POK,pPOK)
      PV = 0x80f5288 "bleu"\0
      CUR = 4
      LEN = 5
    Elt "red" HASH = 0x201ed
    SV = PV(0x80f172c) at 0x80f1460
      REFCNT = 1
      FLAGS = (POK,pPOK)
      PV = 0x80ff370 "rouge"\0
      CUR = 5
      LEN = 6
</pre>
<div class="calloutlist">
<table summary="Callout list">
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc1.png" class="image" title="1"><img alt="1" longdesc="/index.php/Image:Cc1.png" src="/images/6/66/Cc1.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>As before, we dump a reference to the AV, since <code class="function">Dump</code> only takes one parameter.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc2.png" class="image" title="2"><img alt="2" longdesc="/index.php/Image:Cc2.png" src="/images/9/9a/Cc2.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>The <code class="literal">SHAREKEYS</code> flag means that the key structures, the <span class="type">HEK</span>s can be shared between hashes to save memory. For instance, if we have <b><code>$french{red} = "rouge"; $german{red} = "rot"</code></b>, the key structure is only created once, and both hashes contain a pointer to it.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc3.png" class="image" title="3"><img alt="3" longdesc="/index.php/Image:Cc3.png" src="/images/6/60/Cc3.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>As we mentioned before, there are eight buckets in our hash initially - the hash gets restructured as needed. The numbers in brackets around <code class="literal">ARRAY</code> tell us about the population of those buckets: six of them have no entries, and two of them have one entry each.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc4.png" class="image" title="4"><img alt="4" longdesc="/index.php/Image:Cc4.png" src="/images/0/08/Cc4.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>The "quality" of a hash is related to how long it takes to find an element, and this is in turn related to the average length of the hash chains, the linked lists attached to the buckets: if there is only one element in each bucket, you can find the key simply by performing the hash function. If, on the other hand, all the elements are in the same hash bucket, the hash is particularly inefficient.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc5.png" class="image" title="5"><img alt="5" longdesc="/index.php/Image:Cc5.png" src="/images/f/f0/Cc5.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p><code class="function">HvKEYS(hv)</code> returns the number of keys in the hash - in this case, two.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc6.png" class="image" title="6"><img alt="6" longdesc="/index.php/Image:Cc6.png" src="/images/0/09/Cc6.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>These two values refer to the hash iterator: when you use, for instance, <code class="function">keys</code> or <code class="function">each</code> to iterate over a hash, Perl uses these values to keep track of the current entry. The "root iterator", <code class="literal">RITER</code>, is the array index of the bucket currently being iterated, and the "entry interator", <code class="literal">EITER</code>, is the current entry in the hash chain. <code class="literal">EITER</code> walks along the hash chain, and when it gets to the end, it increments <code class="literal">RITER</code> and looks at the first entry in the next bucket. As we're currently not in the middle of a hash iteration, these are set to "safe" values.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc7.png" class="image" title="7"><img alt="7" longdesc="/index.php/Image:Cc7.png" src="/images/4/45/Cc7.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>As with an array, the <code class="function">Dump</code> function shows us some of the elements; it also shows us the hash key: the key for <code class="literal">"blue"</code> is <code class="literal">0x3954c8</code>. (You can confirm that this is correct by running <b><code>hash("blue")</code></b> using the Perl subroutine given above.)
</p>
</td></tr></table>
</div></div></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="More_Complex_Types"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=47" title="Edit section: More Complex Types">edit</a>]</span> <span class="mw-headline"> More Complex Types </span></h2>
</div></div></div>
<p>Sometimes the information provided in an ordinary SV, HV or AV isn't enough for what Perl needs to do. For instance, how does one represent objects? What about tied variables? In this section, we'll look at some of the complications of the basic SV types.
</p><p><font color="red">&lt;advanced&gt;
</p><p>The entirety of this section should be considered advanced material; it will not be covered in the course. Readers following the course should skip to the next section, [#var.inher the section called “Inheritance”] and study this in their own time.
</p>
&lt;/advanced&gt;</font><div class="sect2" lang="en"><div class="titlepage"><div><div>
<a name="Objects"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=48" title="Edit section: Objects">edit</a>]</span> <span class="mw-headline"> Objects </span></h3>
</div></div></div>
<p>Objects are represented relatively simply. As we know from ordinary Perl programming, an object is a reference to some data which happens to know which package it's in. In the definitions of AVs and HVs above, we saw the line
</p>
<pre>    HV*     xmg_stash;  /* class package */

</pre>
<p>As we'll see in [#var.stash the section called “Globs and Stashes”], packages are known as "stashes" internally and are represented by hashes. The <code class="literal">xmg_stash</code> field in AVs and HVs is used to store a pointer to the stash which "owns" the value.
</p><p>Hence, in the case of an object which is an array reference, the dump looks like this:
</p>
<div class="screenco">
<pre><code class="prompt">%</code> <b><code>perl -MDevel::Peek -e '$a=bless [1,2]; Dump($a)'</code></b>
SV = RV(0x81586d4) at 0x815b7a0
  REFCNT = 1
  FLAGS = (ROK)
  RV = 0x8151b0c
  SV = PVAV(0x8153074) at 0x8151b0c
    REFCNT = 1
    FLAGS = (OBJECT)
    IV = 0
    NV = 0
    STASH = 0x8151a34	"main"
    ARRAY = 0x815fcf8
    FILL = 1
    MAX = 1
    ARYLEN = 0x0
    FLAGS = (REAL)
    Elt No. 0
    SV = IV(0x815833c) at 0x8151bc0
      REFCNT = 1
      FLAGS = (IOK,pIOK)
      IV = 1
    Elt No. 1
    SV = IV(0x8158340) at 0x8151c44
      REFCNT = 1
      FLAGS = (IOK,pIOK)
      IV = 2

</pre>
<div class="calloutlist">
<table summary="Callout list">
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc1.png" class="image" title="1"><img alt="1" longdesc="/index.php/Image:Cc1.png" src="/images/6/66/Cc1.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>We create an array reference and bless it into the main package.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc2.png" class="image" title="2"><img alt="2" longdesc="/index.php/Image:Cc2.png" src="/images/9/9a/Cc2.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>The <code class="literal">OBJECT</code> flag is turned on to signify that this SV is an object.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc3.png" class="image" title="3"><img alt="3" longdesc="/index.php/Image:Cc3.png" src="/images/6/60/Cc3.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>And now we have a pointer to the appropriate stash in the <code class="literal">STASH</code> field.
</p>
</td></tr></table>
</div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div>
<a name="Magic"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=49" title="Edit section: Magic">edit</a>]</span> <span class="mw-headline"> Magic </span></h3>
</div></div></div>
<p>This works for AVs and HVs which have a <code class="literal">STASH</code> field, but what about ordinary scalars? There is an additional, more complex type of scalar, which can hold both stash information and also permits us to hang additional, miscellaneous information onto the SV. This miscellaneous information is called "magic", (partially because it allows for clever things to happen, and partially because nobody <span class="emphasis"><i>really</i></span> knows how it works) and the complex SV structure is a <span class="type">PVMG</span>. We can create a <span class="type">PVMG</span> by blessing a scalar reference:
</p>
<pre><code class="prompt">%</code><b><code> perl -MDevel::Peek -le '$b="hi";$a=bless \$b, main; print Dump($a)'</code></b>
SV = RV(0x8106ca4) at 0x810586c
  REFCNT = 1
  FLAGS = (ROK)
  RV = 0x81058c0
  SV = PVMG(0x810e628) at 0x81058c0
    REFCNT = 2
    FLAGS = (OBJECT,POK,pPOK)
    IV = 0
    NV = 0
    PV = 0x80ff698 "hi"\0
    CUR = 2
    LEN = 3
    STASH = 0x80f1388	"main"
</pre>
<p>As you can see, this is similar to the PVNV structure we saw in [#var.pvnv the section called “Floating point numbers”], with the addition of the <code class="literal">STASH</code> field. There's also another field, which we can see if we look at the definition of <code class="varname">xpvmg</code>: 
</p>
<pre>struct xpvmg {
    char *  xpv_pv;     /* pointer to malloced string */
    STRLEN  xpv_cur;    /* length of xpv_pv as a C string */
    STRLEN  xpv_len;    /* allocated size */
    IV      xiv_iv;     /* integer value or pv offset */
    NV      xnv_nv;     /* numeric value, if any */
    MAGIC*  xmg_magic;  /* linked list of magicalness */
    HV*     xmg_stash;  /* class package */
};
</pre>
<p>The <code class="varname">xmg_magic</code> field provides us with somewhere to put a magic structure. What's a magic structure, then? For this, we need to look in <code class="filename">mg.h</code>: 
</p>
<div class="programlistingco">
<pre>struct magic {
    MAGIC*  mg_moremagic;
    MGVTBL* mg_virtual; /* pointer to magic functions */
    U16     mg_private;
    char    mg_type;
    U8      mg_flags;
    SV*     mg_obj;
    char*   mg_ptr;
    I32     mg_len;
};
</pre>
<div class="calloutlist">
<table summary="Callout list">
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc1.png" class="image" title="1"><img alt="1" longdesc="/index.php/Image:Cc1.png" src="/images/6/66/Cc1.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>First, we have a link to another magic structure: this creates a linked list, allowing us to hang multiple pieces of magic off a single SV.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc2.png" class="image" title="2"><img alt="2" longdesc="/index.php/Image:Cc2.png" src="/images/9/9a/Cc2.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>The magic virtual table is a list of functions which should be called to perform particular operations on behalf of the SV. For instance, a tied variable will automagically call the C function <code class="function">magic_getpack</code> when its value is being retrieved. (This function will, in turn, call the <code class="function">FETCH</code> method on the appropriate object.) <font color="red">&lt;advanced&gt;</font>
</p><p>The magic virtual tables are provided by Perl - they're in <code class="filename">perl.h</code> and all begin <code class="varname">PL_vtbl_</code>. For instance, the virtual table for <code class="varname">%ENV</code> is <code class="varname">PL_vtbl_env</code>, and the table for individual elements of the <code class="varname">%ENV</code> hash is <code class="varname">PL_vtbl_envelem</code>.
</p><p>In theory, you can create your own virtual tables by providing functions to fill the <code class="varname">mgvtbl</code> struct in <code class="filename">mg.h</code>, to allow for really bizarre behaviour to be triggered by accesses to your SVs. In practice, nobody really does that, although it's conceivable that you can improve the speed of pure-C tied variables that way. See also the discussion of "U" magic in [#var.tied the section called “Tied Variables”] below.
</p><p>&lt;/advanced&gt;
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc3.png" class="image" title="3"><img alt="3" longdesc="/index.php/Image:Cc3.png" src="/images/6/60/Cc3.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>This is a storage area for data private to this piece of magic. The Perl core doesn't use this, but you can if you're building your own magic types. For instance, you can use it as a "signature" to ensure that this magic was created by your extension, not by some other module.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc4.png" class="image" title="4"><img alt="4" longdesc="/index.php/Image:Cc4.png" src="/images/0/08/Cc4.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>Magic comes in a number of varieties: as well as providing for tied variables, magic propagates taintedness, makes special variables such as <code class="varname">%ENV</code> and <code class="varname">%SIG</code> work, and allows for special things to happen when expressions like <code class="varname">substr($a,0,10)</code> or <code class="varname">$#array</code> are assigned to.
</p><p>Each of these different types of magic have a different "code letter" - the letters in use are shown in <code class="filename">perlguts</code>.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc5.png" class="image" title="5"><img alt="5" longdesc="/index.php/Image:Cc5.png" src="/images/f/f0/Cc5.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>There are only four flags in use for magic; the most important is <code class="literal">MGf_REFCOUNTED</code>, which is set if <code class="varname">mg_obj</code> had its reference count increased when it was added to the magic structure.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc6.png" class="image" title="6"><img alt="6" longdesc="/index.php/Image:Cc6.png" src="/images/0/09/Cc6.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>This is another storage area; it's normally used to point to the object of a tied variable, so that tied functions can be located.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc7.png" class="image" title="7"><img alt="7" longdesc="/index.php/Image:Cc7.png" src="/images/4/45/Cc7.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>The pointer field is set when you add magic to an SV with the <code class="function">sv_magic</code> function. (see below) You can put anything you like here, but it's typically the name of the variable. Built-in magical virtual table functions such as <code class="function">magic_get</code> check this to process Perl's special variables.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc8.png" class="image" title="8"><img alt="8" longdesc="/index.php/Image:Cc8.png" src="/images/e/e6/Cc8.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>This is the length of the string in <code class="varname">mg_ptr</code>.
</p>
</td></tr></table>
</div></div>
<p>What happens when the value of an SV with magic is retrieved? Firstly, a function should call <code class="function">SvGETMAGIC(sv)</code> to cause any magic to be performed. This in turn calls <code class="function">mg_get</code> which walks over the linked list of magic. For each piece of magic, it looks in the magic virtual table, and calls the magical "get" function if there is one.
</p><p>Let's assume that we're dealing with one of Perl's special variables, which has only one piece of magic, "\0" magic. The appropriate magic virtual table for "\0" magic is <code class="varname">PL_vtbl_sv</code>, which is defined as follows: (in <code class="filename">perl.h</code>)
</p>
<pre>EXT MGVTBL PL_vtbl_sv = {MEMBER_TO_FPTR(Perl_magic_get),
                         MEMBER_TO_FPTR(Perl_magic_set),
                         MEMBER_TO_FPTR(Perl_magic_len),
                         0,      0};

</pre>
<p>Magic virtual tables have five elements, as seen in <code class="filename">mg.h</code>: 
</p>
<pre>struct mgvtbl {
    int     (CPERLscope(*svt_get))  (pTHX_ SV *sv, MAGIC* mg);
    int     (CPERLscope(*svt_set))  (pTHX_ SV *sv, MAGIC* mg);
    U32     (CPERLscope(*svt_len))  (pTHX_ SV *sv, MAGIC* mg);
    int     (CPERLscope(*svt_clear))(pTHX_ SV *sv, MAGIC* mg);
    int     (CPERLscope(*svt_free)) (pTHX_ SV *sv, MAGIC* mg);
};
</pre>
<p>So the above virtual table means "call <code class="function">Perl_magic_set</code> when we want to get the value of this SV; call <code class="function">Perl_magic_set</code> when we want to set it; call <code class="function">Perl_magic_len</code> when we want to find its length; do nothing if we want to clear it or when it is freed from memory."
</p><p>In this case, we are getting the value, so <code class="function">magic_get</code> is called. <sup><a href="#ftn.id2482392_1" title="">#ftn.id2482392 1</a></sup> This function looks at the value of <code class="varname">mg_ptr</code>, which, as noted above, is often the name of the variable. Depending on the name of the variable, it determines what to do: for instance, if <code class="varname">mg_ptr</code> is <code class="literal">"!"</code>, then the current value of the C variable <code class="varname">errno</code> is retrieved.
</p><p>A similar process is performed by <code class="function">SvSETMAGIC(sv)</code> to call functions that need to be called when the value of an SV changes.
</p>
<div class="sidebar">
<p><b>Adding magic to an SV</b>
</p><p>Magic is added by calling the function <code class="function">sv_magic(SV* sv, SV* object, char how, char* name, STRLEN len)</code>. <code class="varname">sv</code> is the SV to add magic to; <code class="function">object</code> is the SV to be placed in <code class="varname">mg_obj</code>. <code class="varname">how</code> is the character representing the "code letter" for the type of magic you wish to add. <code class="varname">name</code> and <code class="varname">len</code> will get stored in <code class="varname">mg_ptr</code> and <code class="varname">mg_len</code> respectively. This will also assign the appropriate virtual table for the type of magic - see the list in <code class="filename">perlguts</code>.
</p><p>Note that for user-defined magic, "~" magic, you must set the virtual table manually. (Good luck.)
</p>
</div></div><div class="sect2" lang="en"><div class="titlepage"><div><div>
<a name="Tied_Variables"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=50" title="Edit section: Tied Variables">edit</a>]</span> <span class="mw-headline"> Tied Variables </span></h3>
</div></div></div>
<p>Tied arrays and hashes are implementing by adding type "P" magic to their AVs and HVs; individual elements of the arrays and hashes have "p" magic. Tied scalars and filehandles have type "q" magic. The virtual tables for, for instance, "p" magic scalars look like this:
</p>
<pre>EXT MGVTBL PL_vtbl_packelem =   {MEMBER_TO_FPTR(Perl_magic_getpack),
                                 MEMBER_TO_FPTR(Perl_magic_setpack),
                                 0,
                                 MEMBER_TO_FPTR(Perl_magic_clearpack),
                                 0}
</pre>
<p>That's to say, the function <code class="function">magic_getpack</code> is called when the value of an element of a tied array or hash is retrieved. This function in turn performs a <code class="function">FETCH</code> method call on the object stored in <code class="varname">mg_obj</code>.
</p><p>We can invent our own "pseudo-tied" variables, using the user-defined "U" magic. "U" magic only works on scalars, and allows us to call a function when the value of the scalar is got or set. The virtual table for "U" magic scalars is as follows:
</p>
<pre>EXT MGVTBL PL_vtbl_uvar =   {MEMBER_TO_FPTR(Perl_magic_getuvar),
                             MEMBER_TO_FPTR(Perl_magic_setuvar),
                             0,  0,  0};
</pre>
<p>As you should by now expect, these functions are called when the value of the scalar is accessed. They in turn call our user-defined functions. But how do we tell them what our functions are? In this case, we pass a pointer to a special structure in the <code class="varname">mg_ptr</code> field; the structure is defined in <code class="filename">perl.h</code>, and looks like this:
</p>
<pre>struct ufuncs {
    I32 (*uf_val)(IV, SV*);
    I32 (*uf_set)(IV, SV*);
    IV uf_index;
};
</pre>
<p>Here are our two function pointers: <code class="function">uf_val</code> is called with the value of <code class="function">uf_index</code> and the scalar when the value is sought, and <code class="function">uf_set</code> is called with the same parameters when it is set.
</p><p>Hence, the following code allows us to emulate <code class="varname">$!</code>: 
</p>
<pre>I32 get_errno(IV index, SV* sv) {
    sv_setiv(sv, errno);
}

I32 set_errno(IV index, SV* sv) {
    errno = SvIV(sv); /* Some Cs don't like us setting errno, but hey */
}

struct ufuncs uf;

/* This is XS code */

void
magicify(sv)
    SV *sv;
CODE:
    uf.uf_val = &amp;get_errno;
    uf.uf_set = &amp;set_errno;
    uf.uf_index = 0;
    sv_magic(sv, 0, 'U', (char*)&amp;uf, sizeof(uf));
</pre>
<p>If you need any more flexibility than that, it's time to look into "~" magic.
</p>
</div><div class="sect2" lang="en"><div class="titlepage"><div><div>
<a name="Globs_and_Stashes"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=51" title="Edit section: Globs and Stashes">edit</a>]</span> <span class="mw-headline"> Globs and Stashes </span></h3>
</div></div></div>
<p>SVs that represent variables are kept in the symbol table; as you'll know from your Perl programming, the symbol table starts at <code class="varname">%main::</code> and is an ordinary Perl hash, with the package and variable names as hash keys. But what are the hash values? Let's have a look:
</p>
<pre><code class="prompt">%</code> <b><code>perl -le '$a=5; print ${main::}{a}'</code></b>
 *main::a
</pre>
<p>Well, that doesn't tell us very much - at first sight it just looks like an ordinary string. But if we use <code class="classname">Devel::Peek</code> on it, we find it's actually something else - a glob, or <span class="type">GV</span>: 
</p>
<div class="screenco">
<pre><code class="prompt">%</code> <b><code>perl -MDevel::Peek -e '$a=5; Dump ${main::}{a}'</code></b>
SV = PVGV(0x80fe3e0) at 0x80fb3ec
  REFCNT = 2
  FLAGS = (GMG,SMG)
  IV = 0
  NV = 0
  MAGIC = 0x80fea50
    MG_VIRTUAL = &amp;PL_vtbl_glob
    MG_TYPE = '*'
    MG_OBJ = 0x80fb3ec
    MG_LEN = 1
    MG_PTR = 0x81081d8 "a"
  NAME = "a"
  NAMELEN = 1
  GvSTASH = 0x80f1388	"main"
  GP = 0x80ff2b0
    SV = 0x810592c
    REFCNT = 1
    IO = 0x0
    FORM = 0x0
    AV = 0x0
    HV = 0x0
    CV = 0x0
    CVGEN = 0x0
    GPFLAGS = 0x0
    LINE = 1
    FILE = "-e"
    FLAGS = 0x0
    EGV = 0x80fb3ec	"a"

</pre>
<div class="calloutlist">
<table summary="Callout list">
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc1.png" class="image" title="1"><img alt="1" longdesc="/index.php/Image:Cc1.png" src="/images/6/66/Cc1.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>Globs have get and set magic to handle glob aliasing as well as the conversion to strings we saw above.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc2.png" class="image" title="2"><img alt="2" longdesc="/index.php/Image:Cc2.png" src="/images/9/9a/Cc2.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>The glob's magic object points back to the GV itself, so that the magic functions can easily access it.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc3.png" class="image" title="3"><img alt="3" longdesc="/index.php/Image:Cc3.png" src="/images/6/60/Cc3.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>The "name" is simply the variable's unqualified name; this is combined with the "stash" below to make up the "full name".
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc4.png" class="image" title="4"><img alt="4" longdesc="/index.php/Image:Cc4.png" src="/images/0/08/Cc4.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>The stash itself is a pointer to the hash in which this glob is contained.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc5.png" class="image" title="5"><img alt="5" longdesc="/index.php/Image:Cc5.png" src="/images/f/f0/Cc5.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>This structure, a <span class="type">GP</span> structure, actually holds the symbol table entry. It's separated out so that, in the case of aliased globs, multiple GVs can point to the same GP.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc6.png" class="image" title="6"><img alt="6" longdesc="/index.php/Image:Cc6.png" src="/images/0/09/Cc6.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>As we know, globs have several different "slots", for scalars, arrays, hashes and so on. This is the scalar slot, which is a pointer to an SV.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc7.png" class="image" title="7"><img alt="7" longdesc="/index.php/Image:Cc7.png" src="/images/4/45/Cc7.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>The GP is refcounted because we need to know how many GVs point to it, so it can be safely destroyed when no longer needed.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc8.png" class="image" title="8"><img alt="8" longdesc="/index.php/Image:Cc8.png" src="/images/e/e6/Cc8.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>The other slots are a filehandle, a form, an array, a hash and a code value. (see [#var.cv the section called “Code Values”])
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc9.png" class="image" title="9"><img alt="9" longdesc="/index.php/Image:Cc9.png" src="/images/9/90/Cc9.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>This stores the "age" of the code value. Every time a subroutine is defined, Perl increments the variable <code class="varname">PL_sub_generation</code>. This can be used as a way of checking the method cache: if the current value of <code class="varname">PL_sub_generation</code> is equal to the one stored in a GP, this GP is still valid.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php?title=Special:Upload&amp;wpDestFile=Cc10.png" class="new" title="Image:Cc10.png">Image:Cc10.png</a>
</p>
</td><td align="left" valign="top">
<p>The GP's flags are currently unused.
</p>
</td></tr></table>
</div></div>
<p>Symbol tables are considered some of the hairiest voodoo in the Perl internals. <font color="red">&lt;advanced&gt;</font>
</p><p>From C, the variable <code class="varname">PL_defstash</code> is the HV representing the <code class="varname">main::</code> stash; <code class="varname">PL_curstash</code> contains the current package's stash.
</p>
&lt;/advanced&gt; </div><div class="sect2" lang="en"><div class="titlepage"><div><div>
<a name="Code_Values"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=52" title="Edit section: Code Values">edit</a>]</span> <span class="mw-headline"> Code Values </span></h3>
</div></div></div>
<p>The final data type we will examine is the <span class="type">CV</span>, a code value used for storing subroutines. Both Perl and XSUB subroutines are stored in CVs, and blocks are also stored in CVs. The CV structure can be found in <code class="filename">cv.h</code>: 
</p>
<div class="programlistingco">
<pre>struct xpvcv {
     char *  xpv_pv;     /* pointer to malloced string */
     STRLEN  xpv_cur;    /* length of xp_pv as a C string */
     STRLEN  xpv_len;    /* allocated size */
     IV      xof_off;    /* integer value */
     NV      xnv_nv;     /* numeric value, if any */
     MAGIC*  xmg_magic;  /* magic for scalar array */
     HV*     xmg_stash;  /* class package */
 
     HV *    xcv_stash;
     OP *    xcv_start;
     OP *    xcv_root;
     void    (*xcv_xsub) (pTHXo_ CV*);
     ANY     xcv_xsubany;
     GV *    xcv_gv;
     char *  xcv_file;
     long    xcv_depth;  /* &gt;= 2 indicates recursive call */
     AV *    xcv_padlist;
     CV *    xcv_outside;
 #ifdef USE_THREADS
     perl_mutex *xcv_mutexp;
     struct perl_thread *xcv_owner;  /* current owner thread */
 #endif /* USE_THREADS */
     cv_flags_t  xcv_flags;
 }
</pre>
<div class="calloutlist">
<table summary="Callout list">
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc1.png" class="image" title="1"><img alt="1" longdesc="/index.php/Image:Cc1.png" src="/images/6/66/Cc1.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>Although it might look like this provides the CV's stash, it is important to note that this is a pointer to the stash in which the CV was <span class="emphasis"><i>compiled</i></span>; for instance, given 
</p>
<pre>package First;
sub Second::mysub { ...}
</pre>
<p>then <code class="literal">xcv_stash</code> points to <code class="literal">First::</code>. This is why, for instance,
</p>
<pre>package One;
$x = "In One";
package Two;
$x = "In Two";
sub One::test { print $x }
package main;
One::test();
</pre>
<p>will print <code class="literal">"In Two"</code>.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc2.png" class="image" title="2"><img alt="2" longdesc="/index.php/Image:Cc2.png" src="/images/9/9a/Cc2.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>For a subroutine defined in Perl, these two pointers hold the start and the root of the compiled op tree; this will be further in [#ops Chapter�6, <i> Fundamental Operations </i>].
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc3.png" class="image" title="3"><img alt="3" longdesc="/index.php/Image:Cc3.png" src="/images/6/60/Cc3.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>For an XSUB, on the other hand, this field contains a function pointer pointing to the C function implementing the subroutine.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc4.png" class="image" title="4"><img alt="4" longdesc="/index.php/Image:Cc4.png" src="/images/0/08/Cc4.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>This is how constant subroutines are implemented: Perl can arrange for the SV representing the constant to be returned by a constant XS routine, which is hung here.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc5.png" class="image" title="5"><img alt="5" longdesc="/index.php/Image:Cc5.png" src="/images/f/f0/Cc5.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>This simply holds a pointer to the glob by which the subroutine was defined.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc6.png" class="image" title="6"><img alt="6" longdesc="/index.php/Image:Cc6.png" src="/images/0/09/Cc6.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>This stores the name of the file in which the subroutine was defined. For an XSUB, this will be the <code class="literal">.c</code> file rather than the <code class="literal">.xs</code> file.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc7.png" class="image" title="7"><img alt="7" longdesc="/index.php/Image:Cc7.png" src="/images/4/45/Cc7.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>This is a counter which is incremented each time the subroutine is entered and decremented when it is left; this allows Perl to keep track of recursive calls to a subroutine.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc8.png" class="image" title="8"><img alt="8" longdesc="/index.php/Image:Cc8.png" src="/images/e/e6/Cc8.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>Explained below, <code class="literal">xcv_padlist</code>, the pad list, contains the lexical variables declared in a subroutine or code block.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc9.png" class="image" title="9"><img alt="9" longdesc="/index.php/Image:Cc9.png" src="/images/9/90/Cc9.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>Consider the following code:
</p>
<pre>{
   my $x = 0;
   sub counter { return ++$x; }
}
</pre>
<p>When inside <code class="function">counter</code>, where does Perl "get" the SV <code class="varname">$x</code> from? It's not a global, so it doesn't live in a stash. It's not declared in <code class="function">counter</code>, so it doesn't belong in <code class="function">counter</code>'s pad list. It actually belong to the pad list for the CV "outside" of <code class="function">counter</code>. To enable Perl to get at these variables and also at lexicals used in closures, each CV contains a pointer to CV of the enclosing scope.
</p>
</td></tr></table>
</div></div>
</div><div class="sect2" lang="en"><div class="titlepage"><div><div>
<a name="Lexical_Variables"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=53" title="Edit section: Lexical Variables">edit</a>]</span> <span class="mw-headline"> Lexical Variables </span></h3>
</div></div></div>
<p>Global variables live, as we've seen, in symbol tables or "stashes". Lexical variables, on the other hand, are tied to blocks rather than packages, and so are stored inside the CV representing their enclosing block.
</p><p>As mentioned briefly above, the <code class="function">xcv_padlist</code> element holds a pointer to an AV. This array, the padlist, contains the names and values of lexicals in the current code block. Again, a diagram is the best way to demonstrate this: <span class="inlinemediaobject"><a href="/index.php/Image:Padlists.gif" class="image" title="Image:padlists.gif"><img alt="Image:padlists.gif" longdesc="/index.php/Image:Padlists.gif" src="/images/e/e8/Padlists.gif" width="415" height="284" /></a></span>
</p><p>The first element of the padlist - called the "padname" - is an array containing the names of the variables, and the other elements are lists of the current values of those variables. Why do we have several lists of current values? Because a CV may be entered several times - for instance, when a subroutine recurses. Having, essentially, a stack of frames ensures that we can restore the previous values when a recursive call ends. Hence, the current values of lexical variables are stored in the last element on the padlist.
</p><p><font color="red">&lt;advanced&gt;
</p><p>From inside perl, you can get at the current pad as <code class="varname">PL_curpad</code>. Note that this is the pad itself, not the padlist. To get the padlist, you need to perform some awkwardness:
</p>
<pre>I32 cxix    = dopoptosub(cxstack_ix) /* cxstack_ix is a macro */
AV* padlist = cxix&nbsp;? CvPADLIST(cxstadck[ix].blk_sub.cv)&nbsp;: PL_comppadlist;
</pre>
<p>We'll visit pads again when we look at operator targets in [#ops.scratch the section called “ Scatchpads and Targets ”].
</p>
&lt;/advanced&gt;</font></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="Inheritance"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=54" title="Edit section: Inheritance">edit</a>]</span> <span class="mw-headline"> Inheritance </span></h2>
</div></div></div>
<p>As we have seen, some types of SV deliberately build on and extend the structure of others. The SV code is written to attempt to provide an object-oriented style of programming inside C, and it is fair to say that some SV "classes" inherit from others. In the compiler module <code class="classname">B</code>, we see these inheritance relationships spelt out:
</p>
<pre>@B::PV::ISA = 'B::SV';
@B::IV::ISA = 'B::SV';
@B::NV::ISA = 'B::IV';
@B::RV::ISA = 'B::SV';
@B::PVIV::ISA = qw(B::PV B::IV);
@B::PVNV::ISA = qw(B::PV B::NV);
@B::PVMG::ISA = 'B::PVNV';
@B::PVLV::ISA = 'B::PVMG';
@B::BM::ISA = 'B::PVMG';
@B::AV::ISA = 'B::PVMG';
@B::GV::ISA = 'B::PVMG';
@B::HV::ISA = 'B::PVMG';
@B::CV::ISA = 'B::PVMG';
@B::IO::ISA = 'B::PVMG';
@B::FM::ISA = 'B::CV';
</pre>
</div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="Summary_3"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=55" title="Edit section: Summary">edit</a>]</span> <span class="mw-headline"> Summary </span></h2>
</div></div></div>
<p>Perl uses several variable types in its internal representation to achieve the flexibility that is needed for its external types: scalars, (SVs) arrays, (AVs) hashes (HVs) and code blocks. (CVs)
</p><p>The module <code class="classname">Devel::Peek</code> allows us to examine how Perl types are repesented internally. The field names produced by <code class="classname">Devel::Peek</code> can be easily turned into macros which allow us to get and set the values of the fields from C.
</p><p>The key files from the Perl source tree which deal with Perl's internal variables are <code class="filename">sv.c</code>, <code class="filename">av.c</code> and <code class="filename">hv.c</code>; the documentation in the associated header files (<code class="filename">sv.h</code>, <code class="filename">av.h</code> and <code class="filename">hv.h</code>) is extremely helpful for understanding how to deal with Perl's internal variables.
</p>
</div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="Exercises_3"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=56" title="Edit section: Exercises">edit</a>]</span> <span class="mw-headline"> Exercises </span></h2>
</div></div></div><div class="orderedlist">
<ol><li> One thing we didn't do in this chapter was run <code class="classname">Devel::Peek</code> on a subroutine. Try it on a named subroutine reference, an anonymous subref and a subref to an XS routine.
</li><li> See if you can work out what 'FM', 'IO', 'BM' and 'PVLV' are in the above; try creating them in Perl and dumping them out with <code class="classname">Devel::Peek</code>. Use <code class="filename">sv.h</code> to explain the new fields.
</li></ol>
</div></div><div class="footnotes"><br />
<hr />
<div class="footnote">
<p><sup><a href="#id2482392_1" title="">#id2482392 1</a> </sup>We'll see later that Perl uses the <code class="function">Perl_</code> prefix internally for function names, but that prefix can be omitted inside the Perl core. Hence, we'll call <code class="function">Perl_magic_get</code> "<code class="function">magic_get</code>".
</p>
</div></div></div><div class="chapter" lang="en"><div class="titlepage"><div><div>
<a name="The_Lexer_and_the_Parser"></a><h1><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=57" title="Edit section: The Lexer and the Parser">edit</a>]</span> <span class="mw-headline"> The Lexer and the Parser </span></h1>
<p>In this chapter, we're going to examine how Perl goes about turning a piece of Perl code into an internal representation ready to be executed. The nature of the internal representation, a tree of structures representing operations, will be looked at in the next chapter, but here we'll just concern ourselves with the lexer and parser which work together to "understand" Perl code.
</p>
<div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="The_Parser"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=58" title="Edit section: The Parser">edit</a>]</span> <span class="mw-headline"> The Parser </span></h2>
</div></div></div>
<p>The parser lives in <code class="filename">perly.y</code>. This is code in a language called Yacc, which is converted to C using the <span><b>bison</b></span> command. <font color="red">&lt;advanced&gt;</font>
</p><p>In fact, Perl needs to do some fixing up on the <span><b>bison</b></span> output to have it deal with dynamic rather than static memory allocation. Hence, if you make any changes to <code class="filename">perly.y</code>, just running <span><b>bison</b></span> isn't enough - you need to run the Make target <code class="literal">regen_perly</code>, which will do the fixups that Perl requires.
</p>
&lt;/advanced&gt; In order to understand this language, we need to understand how grammars work and how parsing works. <div class="sect2" lang="en"><div class="titlepage"><div><div>
<a name="BNF_and_Parsing"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=59" title="Edit section: BNF and Parsing">edit</a>]</span> <span class="mw-headline"> BNF and Parsing </span></h3>
</div></div></div>
<p>Computer programmers define a language by its grammar, which is a set of rules. They usually describe this grammar in a form called "Backhaus-Naur Form" <sup><a href="#ftn.id2483505_2" title="">#ftn.id2483505 2</a></sup> or <i>BNF</i>. BNF tells us how phrases fit together to make sentences. For instance, here's a simple BNF for English - obviously, this isn't going to describe the whole of the English grammar, but it's a start:
</p>
<pre>	  sentence  &nbsp;: nounphrase verbphrase nounphrase;

	  verbphrase&nbsp;: VERB;

	  nounphrase&nbsp;: NOUN
	  | ADJECTIVE  nounphrase
	  | PRONOMINAL nounphrase
	  | ARTICLE    nounphrase;

</pre>
<p>Here is the prime rule of BNF: you can make the thing on the left of the colon if you see all the things on the right in sequence. So, this grammar tells us that a sentence is made up of a noun phrase, a verb phrase and then a noun phrase. The vertical bar does exactly what it does in regular expressions: you can make a noun phrase if you have a noun, or an adjective plus another noun phrase, or an article plus a noun phrase. Turning the things on the right into the thing on the left is called a <i>reduction</i>. The idea of parsing is to reduce all of the input down to the first thing in the grammar - a sentence.
</p><p>You'll notice that things which can't be broken down any further are in capitals - there's no rule which tells us how to make a noun, for instance. This is because these are fed to us by the lexer; these are called <i>terminal symbols</i>, and the things which aren't in capitals are called <i>non-terminal symbols</i>. Why? Well, let's see what happens if we try and parse a sentence in this grammar. <span class="inlinemediaobject"><a href="/index.php/Image:Mycat.gif" class="image" title="Image:mycat.gif"><img alt="Image:mycat.gif" longdesc="/index.php/Image:Mycat.gif" src="/images/7/77/Mycat.gif" width="324" height="314" /></a></span>
</p><p>The text right at the bottom - "my cat eats fish" - is what we get in from the user. The tokeniser then turns that into a series of tokens - "PRONOMINAL NOUN VERB NOUN". From that, we can start performing some reductions: we have a pronominal, so we're looking for a noun phrase to satisfy the <code class="literal">nounphrase&nbsp;: PRONOMINAL nounphrase</code> rule. Can we make a noun phrase? Yes, we can, by reducing the <code class="literal">NOUN</code> ("cat") into a <code class="literal">nounphrase</code>. Then we can use <code class="literal">PRONOMINAL nounphrase</code> to make another <code class="literal">nounphrase</code>.
</p><p>Now we've got a <code class="literal">nounphrase</code> and a <code class="literal">VERB</code>. We can't do anything further with the <code class="literal">nounphrase</code>, so we'll switch to the <code class="literal">VERB</code>, and the only thing we can do with that is turn it into a <code class="literal">verbphrase</code>. Finally, we can reduce the noun to a <code class="literal">nounphrase</code>, leaving us with <code class="literal">nounphrase verbphrase nounphrase</code>. Since we can turn this into a <code class="literal">sentence</code>, we've parsed the text.
</p>
</div><div class="sect2" lang="en"><div class="titlepage"><div><div>
<a name="Parse_actions_and_token_values"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=60" title="Edit section: Parse actions and token values">edit</a>]</span> <span class="mw-headline"> Parse actions and token values </span></h3>
</div></div></div>
<p>It's important to note that the tree we've constructed above - the "parse tree" - is only a device to help us understand the parsing process. It doesn't actually exist as a data structure anywhere in the parser. This is actually a little inconvenient, because the whole point of parsing a piece of Perl text is to come up with a data structure pretty much like that.
</p><p>Not a problem. Yacc allows us to extend BNF by adding actions to rules - every time the parser performs a reduction using a rule, it can trigger a piece of C code to be executed. Here's an extract from Perl's grammar in <code class="filename">perly.y</code>: 
</p>
<pre>term   &nbsp;:   term ASSIGNOP term
	  { $$ = newASSIGNOP(OPf_STACKED, $1, $2, $3); }
        |   term ADDOP term
	  { $$ = newBINOP($2, 0, scalar($1), scalar($3)); }

</pre>
<p>The pieces of code in the curlies are actions to be performed. Here's the final piece of the puzzle: each symbol carries some additional information around. For instance, in our "cat" example, the first <code class="literal">NOUN</code> had the value "cat". You can get at the value of a symbol by a Yacc variable starting with a dollar sign: in the example above, <code class="varname">$1</code> is the value of the first symbol on the right of the colon (<code class="literal">term</code>), <code class="varname">$2</code> is the value of the second symbol (either <code class="literal">ASSIGNOP</code> or <code class="literal">ADDOP</code> depending on which line you're reading) and so on. <code class="varname">$$</code> is the value of the symbol on the left. Hence information is propagated "up" the parse tree by manipulating the information on the right and assigning it to the symbol on the left.
</p>
</div><div class="sect2" lang="en"><div class="titlepage"><div><div>
<a name="Parsing_some_Perl"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=61" title="Edit section: Parsing some Perl">edit</a>]</span> <span class="mw-headline"> Parsing some Perl </span></h3>
</div></div></div>
<p>So, let's see what happens if we parse the Perl code <b><code>$a = $b + $c</code></b>. We have to assume that <b><code>$a</code></b>, <b><code>$b</code></b> and <b><code>$c</code></b> have already been parsed a little; they'll turn into <code class="literal">term</code> symbols. Each of these symbols will have a value, and that will be an "op". An "op" is a data structure representing an operation, and the operation to be represented will be that of retrieving the storage pointed to by the appropriate variable.
</p><p>Let's start from the right<sup><a href="#ftn.id2483791_3" title="">#ftn.id2483791 3</a></sup> , and deal with <b><code>$b + $c</code></b>. The <b><code>+</code></b> is turned by the lexer into the terminal symbol <code class="literal">ADDOP</code>. Now, just like there can be lots of different nouns that all get tokenised to <code class="literal">NOUN</code>, there can be several different <code class="literal">ADDOP</code>s - concatenation is classified as an <code class="literal">ADDOP</code>, so <b><code>$b . $c</code></b> would look just the same to the parser. The difference, of course, is the value of the symbol - this <code class="literal">ADDOP</code> will have the value <code class="literal">'+'</code>.
</p><p>Hence, we have <code class="literal">term ADDOP term</code>. This means we can perform a reduction, using the second rule in our snippet. When we do that, we have to perform the code in curlies underneath the rule - <code class="literal"> { $$ = newBINOP($2, 0, scalar($1), scalar($3)); }</code>. <code class="function">newBINOP</code> is a function which creates a new binary "op". The first argument is the type of binary operator, and we feed it the value of the second symbol. This is <code class="literal">ADDOP</code>, and as we have just noted, this symbol will have the value <code class="literal">'+'</code>. So although <code class="literal">'.'</code> and <code class="literal">'+'</code> look the same to the parser, they'll eventually be distinguished by the value of their symbol. Back to <code class="function">newBINOP</code>. The next argument is the flags we wish to pass to the op. We don't want anything special, so we pass zero.
</p><p>Then we have our arguments to the binary operator - obviously, these are the value of the symbol on the left and the value of the symbol on the right of the operator. As we mentioned above, these are both "op"s, to retrieve the values of <code class="varname">$b</code> and <code class="varname">$c</code> respectively. We assign the new "op" created by <code class="function">newBINOP</code> to be the value of the symbol we're propagating upwards. Hence, we've taken two ops - the ones for <code class="varname">$b</code> and <code class="varname">$c</code> - plus an addition symbol, and turned them into a new op representing the combined action of fetching the values of <code class="varname">$b</code> and <code class="varname">$c</code> and then adding them together.
</p><p>Now we do the same thing with <code class="literal">$a = ($b+$c)</code>. I've put the right hand side in brackets to show that we've already got something which represents fetching <code class="varname">$b</code> and <code class="varname">$c</code> and adding them. <code class="literal">=</code> is turned into an <code class="literal">ASSIGNOP</code> by the tokeniser in the same way as we turned <code class="literal">+</code> into an <code class="literal">ADDOP</code>. And, in just the same way, there are various different types of assignment operator - <code class="literal">||=</code> and <code class="literal">&amp;&amp;=</code> are also passed as <code class="literal">ASSIGNOP</code>s. From here, it's easy: we take the <code class="literal">term</code> representing <code class="varname">$a</code>, plus the <code class="literal">ASSIGNOP</code>, plus the <code class="literal">term</code> we've just constructed, reduce them all to another <code class="literal">term</code>, and perform the action underneath the rule. In the end, we end up with a data structure a little like this: <span class="inlinemediaobject"><a href="/index.php/Image:Abc-simple.gif" class="image" title="Image:abc-simple.gif"><img alt="Image:abc-simple.gif" longdesc="/index.php/Image:Abc-simple.gif" src="/images/3/3a/Abc-simple.gif" width="172" height="183" /></a></span>
</p><p>You can find a hypertext version of the Perl grammar at <a href="http://simon-cozens.org/hacks/grammar.pdf" class="external free" title="http://simon-cozens.org/hacks/grammar.pdf" rel="nofollow">http://simon-cozens.org/hacks/grammar.pdf</a>
</p>
</div></div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="The_Tokeniser"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=62" title="Edit section: The Tokeniser">edit</a>]</span> <span class="mw-headline"> The Tokeniser </span></h2>
</div></div></div>
<p>The tokeniser, in <code class="filename">toke.c</code> is one of the most difficult parts of the Perl core to understand; this is primarily because there is no real "roadmap" to explain its operation. In this section, we'll try to show how the tokeniser is put together.
</p>
<div class="sect2" lang="en"><div class="titlepage"><div><div>
<a name="Basic_tokenising"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=63" title="Edit section: Basic tokenising">edit</a>]</span> <span class="mw-headline"> Basic tokenising </span></h3>
</div></div></div>
<p>The core of the tokeniser is the intimidatingly long <code class="function">yylex</code> function. This is the function called by the parser, <code class="function">yyparse</code>, when it requests a new token of input.
</p><p>First, some basics. When a token has been identified, it is placed in <code class="varname">PL_tokenbuf</code>. The file handle from which input is being read is <code class="varname">PL_rsfp</code>. The current position in the input is stored in the variable <code class="varname">PL_bufptr</code>, which is a pointer into the PV of the SV <code class="varname">PL_linestr</code>. When scanning for a token, the variable <code class="varname">s</code> advances from the start of <code class="varname">PL_bufptr</code> towards the end of the buffer (<code class="varname">PL_bufend</code>) until it finds a token.
</p><p>The first thing the parser does is test whether the next thing in the input stream has already been identified as an identifier; when the tokeniser sees <code class="literal">'%'</code>, <code class="literal">'$'</code> and the like as part of the input, it tests to see whether it introduces a variable. If so, it puts the variable name into the token buffer. It then returns the type sigil (<code class="literal">%</code>, <code class="literal">$</code>, etc.) as a token, and sets a flag (<code class="varname">PL_pending_ident</code>) so that the next time <code class="function">yylex</code> is called, it can pull the variable name straight out of the token buffer. Hence, right at the top of <code class="function">yylex</code>, you'll see code which tests <code class="varname">PL_pending_ident</code> and deals with the variable name.
</p>
<div class="sect3" lang="en"><div class="titlepage"><div><div>
<a name="Tokeniser_State"></a><h4><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=64" title="Edit section: Tokeniser State">edit</a>]</span> <span class="mw-headline"> Tokeniser State </span></h4>
</div></div></div>
<p>Next, if there's no identifier in the token buffer, it checks its tokeniser state. The tokeniser uses the variable <code class="varname">PL_lex_state</code> to store state information.
</p><p>One important state is <code class="literal">LEX_KNOWNEXT</code>, which occurs when Perl has had to look ahead one token to identify something. If this happens, it has tokenised not just the next token, but the one after as well. Hence, it sets <code class="literal">LEX_KNOWNEXT</code> to say "we've already tokenised this token, simply return it."
</p><p>The functions which set <code class="literal">LEX_KNOWNEXT</code> are <code class="function">force_word</code>, which declares that the next token has to be a word, (for instance, after having seen an arrow in <code class="literal">$foo-&gt;bar</code>) <code class="function">force_ident</code>, which makes the next token an identifier, (for instance, if it sees a <code class="literal">*</code> when not expecting an operator, this must be a glob) <code class="function">force_version</code>, (on seeing a number after <code class="literal">use</code>) and the general <code class="function">force_next</code>.
</p><p>Many of the other states are to do with interpolation of double-quoted strings; we'll look at those in more detail in the next section.
</p>
</div><div class="sect3" lang="en"><div class="titlepage"><div><div>
<a name="Looking_ahead"></a><h4><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=65" title="Edit section: Looking ahead">edit</a>]</span> <span class="mw-headline"> Looking ahead </span></h4>
</div></div></div>
<p>After checking the lexer state, it's time to actually peek at the buffer and see what's waiting; this is the start of the giant <code class="literal">switch</code> statement in the middle of <code class="function">yylex</code>, just following the label <code class="literal">retry</code>.
</p><p>One of the first things we check for is character zero - this signifies either the start or the end of the file or the end of the line. If it's the end of the file, the tokeniser returns zero and the game is one; at the beginning of the file, Perl has to process the code for command line switches such as <code class="literal">-n</code> and <code class="literal">-p</code>. Otherwise, Perl calls <code class="function">filter_gets</code> to get a new line from the file through the source filter system, and calls <code class="function">incline</code> to increase the line number.
</p><p>The next test is for comments and new lines, which Perl skips over. After that come the tests for individual special characters. For instance, the first test is for minus, which could be unary minus if followed by a number or identifier, or the binary minus operator if Perl is expecting an operator, or the arrow operator if followed by a <code class="literal">&gt;</code>, or the start of a filetest operator if followed by an appropriate letter, or a quoting option such as <code class="literal">(-foo =&gt; "bar" )</code>. Perl tests for each case, and returns the token type using one of the upper-case token macros defined at the beginning of <code class="filename">toke.c</code>: <code class="literal">OPERATOR</code>, <code class="literal">TERM</code>, and so on.
</p><p>If the next character isn't a symbol that Perl knows about, it's an alphabetic character which might start a keyword: the tokeniser jumps to the label <code class="literal">keylookup</code> where it checks for labels and things like <code class="literal">CORE::function</code>. It then calls <code class="function">keyword</code> to test whether it is a valid built-in or not - if so, <code class="function">keyword</code> turns it into a special constant (such as <code class="literal">KEY_open</code>) which can be fed into the <code class="literal">switch</code> statement. If it's not a keyword, Perl has to determine whether it's a bareword, a function call or an indirect object or method call.
</p>
</div><div class="sect3" lang="en"><div class="titlepage"><div><div>
<a name="Keywords"></a><h4><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=66" title="Edit section: Keywords">edit</a>]</span> <span class="mw-headline"> Keywords </span></h4>
</div></div></div>
<p>The final section of the <code class="literal">switch</code> statement deals with the <code class="literal">KEY_</code> constants handed back from <code class="function">keyword</code>, performing any actions necessary for using the builtins. (For instance, given <code class="literal">__DATA__</code>, the tokeniser sets up the <code class="literal">DATA</code> filehandle.)
</p>
</div></div><div class="sect2" lang="en"><div class="titlepage"><div><div>
<a name="Sublexing"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=67" title="Edit section: Sublexing">edit</a>]</span> <span class="mw-headline"> Sublexing </span></h3>
</div></div></div>
<p>"Sublexing" refers to the the fact that inside double-quoted strings and other interpolation contexts (regular expressions, for instance) a different type of tokenisation is needed.
</p><p>This is typically started after a call to <code class="function">scan_str</code>, which is an exceptionally clever piece of code which extracts a string with balanced delimiters, placing it into the SV <code class="varname">PL_lex_stuff</code>. Then <code class="function">sublex_start</code> is called which sets up the data structures used for sublexing and changes the lexer's state to <code class="literal">LEX_INTERPPUSH</code>, which is essentially a scoping operator for sublexing.
</p><p>Why does sublexing need scoping? Well, consider something like <code class="literal">"Foo\u\LB\uarBaz"</code>. This actually gets tokenized as the moral equivalent of <code class="literal">"Foo" . ucfirst(lc("B" . ucfirst("arBaz")))</code>. The push state (which makes a call to <code class="function">sublex_push</code>) quite literally pushes an opening bracket onto the input stream.
</p><p>This in turn changes the state to <code class="literal">LEX_INTERPCONCAT</code>; the concatentation state uses <code class="function">scan_const</code> to pull out constant strings and supplies the concatenation operator between them. If a variable to be interpolated is found, the state is changed to <code class="literal">LEX_INTERPSTART</code>: this means that <code class="literal">"foo$bar"</code> is changed into <code class="literal">"foo".$bar</code> and <code class="literal">"foo@bar"</code> is turned into <code class="literal">"foo".join($",@bar)</code>.
</p><p>There are times when it is not sure when sublexing of an interpolated variable should end - in these cases, the horrifyingly scary function <code class="function">intuit_more</code> is called to make an educated guess on the likelihood of more interpolation.
</p><p>Finally, once sublexing is done, the state is set to <code class="literal">LEX_INTERPEND</code> which fixes up the closing brackets.
</p>
</div></div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="Summary_4"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=68" title="Edit section: Summary">edit</a>]</span> <span class="mw-headline"> Summary </span></h2>
</div></div></div>
<p>In this chapter, we've briefly examined how Perl turns Perl source input into a tree data structure suitable for executing; in the next chapter, we'll look more specifically at the nature of the nodes in that tree.
</p><p>There are two stages to this operation: the tokeniser, <code class="filename">toke.c</code>, chops up the incoming program and recognises different token types; the parser <code class="filename">perly.y</code> then assembles these tokens into phrases and sentences. In reality, the whole task is driver by the parser - Perl calls <code class="function">yyparse</code> to parse a program, and when the parser needs to know about the next token, it calls <code class="function">yylex</code>.
</p><p>While the parser is relatively straightforward, the tokeniser is somewhat more tricky. The key to understanding it is to divide its operation into checking tokeniser state, dealing with non-alphanumeric symbols in ordinary program code, dealing with alphanumerics, and dealing with double-quoted strings and other interpolation contexts.
</p><p>Very few people actually understand the whole of how the tokeniser and parser work, but this chapter should have given you a useful insight into how Perl understands program code, and how to locate the source of particular behaviour inside the parsing system.
</p>
</div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="Exercises_4"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=69" title="Edit section: Exercises">edit</a>]</span> <span class="mw-headline"> Exercises </span></h2>
</div></div></div>
<div class="orderedlist">
<ol><li> What do you think the <code class="literal">LEX_FORMLINE</code> state is for? Work out what it does.
</li><li> You can put <code class="literal">#!perl -p</code> at the top of your file and Perl will behave as though the <code class="literal">-p</code> command-line switch was given. Since exactly the same mechanism handles incoming code from a file and from <code class="literal">eval</code>, why won't it do that if you say <code class="literal">eval qq[#!perl -p]</code>?
</li><li> Why is <code class="literal">--$a++</code> a syntax error? Explain in terms of how it should be parsed. Look for the <code class="literal">PREDEC</code> and <code class="literal">POSTINC</code> types in the grammar. What would you need to change to make it parse?
</li><li> In the current Perl source, just after <code class="literal">case "#":</code>, you'll find test marked "Found by Ilya", which tests for a buffer overflow. How could that conceivably occur? Work out what would trigger the error message and produce some Perl code which would do so.
</li></ol>
</div>
</div><div class="footnotes"><br />
<hr />
<div class="footnote">
<p><sup><a href="#id2483505_2" title="">#id2483505 2</a> </sup>Sometimes "Backhaus Normal Form"
</p>
</div><div class="footnote">
<p><sup><a href="#id2483791_3" title="">#id2483791 3</a> </sup> This is slightly disingenous, as parsing is always done from left to right, but this simplification is easier than getting into the details of how Yacc grammars recognise the precendence of operators.
</p><p><br />
</p>
<a name="Fundamental_Operations"></a><h1><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=70" title="Edit section: Fundamental Operations">edit</a>]</span> <span class="mw-headline"> Fundamental Operations </span></h1>
<p>So we've seen that the job of the parsing stage is to reduce a program to a tree structure, and each node of the tree represents an operation. In this chapter, we'll look more closely at those operations: what they are, how they're coded, and how they fit together.
</p>
<a name="The_basic_op"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=71" title="Edit section: The basic op">edit</a>]</span> <span class="mw-headline"> The basic op </span></h2>
<p>Just AVs and HVs are "extensions" of the basic SV structure, there are a number of different "flavours" of ops, built on a basic OP structure; you can find this structure defined as <code class="literal">BASEOP</code> in <code class="filename">op.h</code>: 
</p>
<pre>    OP*         op_next;
    OP*         op_sibling;
    OP*         (CPERLscope(*op_ppaddr))(pTHX);
    PADOFFSET   op_targ;
    OPCODE      op_type;
    U16         op_seq;
    U8          op_flags;
   U8          op_private;

</pre>
<p>Some of these fields are easy to explain, so we'll deal with them now.
</p><p>The <code class="literal">op_next</code> field is a pointer to the next op which needs to be executed. We'll see later, in [#ops.tied the section called “ Tying it all together ”], how the "thread of execution" is derived from the tree.
</p><p><code class="literal">op_ppaddr</code> is the address of the C function which carries out this particular operation. It's stored here so that our main execution code can simply dereference the function pointer and jump to it, instead of having to perform a lookup.
</p><p>Each unique operation has a different number; this can be found in the <code class="literal">enum</code> in <code class="filename">opnames.h</code>: 
</p>
<pre>typedef enum opcode {
    OP_NULL,        /* 0 */
    OP_STUB,        /* 1 */
    OP_SCALAR,      /* 2 */
    OP_PUSHMARK,    /* 3 */
    OP_WANTARRAY,   /* 4 */
    OP_CONST,       /* 5 */
    OP_GVSV,        /* 6 */
    OP_GV,          /* 7 */
    ...
};
</pre>
<p>The number of the operation to perform is stored in the <code class="literal">op_type</code> field. We'll examine some of the more interesting operations in [#ops.diff the section called “The different operations”].
</p><p><code class="literal">op_flags</code> is a set of flags generic to all ops; <code class="literal">op_private</code> stores flags which are specific to the type of op. For instance, the <code class="literal">repeat</code> op which implements the <code class="literal">x</code> operator has the flag <code class="literal">OPpREPEAT_DOLIST</code> set when it's repeating a list rather than a string. This flag only makes sense for that particular operation, so is stored in <code class="literal">op_private</code>. Private flags have the <code class="literal">OPp</code> prefix, and public flags begin with <code class="literal">OPf</code>.
</p><p><code class="literal">op_seq</code> is a sequence number allocated by the optimizer. It allows for, for instance, correct scoping of lexical variables by storing the sequence numbers of the beginning and end of scope operations inside the pad.
</p><p>As for the remaining fields, we'll examine <code class="literal">op_sibling</code> in [#ops.flavours the section called “Different "flavours" of op”] and <code class="literal">op_targ</code> in [#ops.scratch the section called “ Scatchpads and Targets ”]
</p>
<div class="sect2" lang="en"><div class="titlepage"><div><div>
<a name="The_different_operations"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=72" title="Edit section: The different operations">edit</a>]</span> <span class="mw-headline"> The different operations </span></h3>
</div></div></div>
<p>Perl has currently 351 different operations, implementing all the built-in functions and operators, as well as the more structural operations required internally - entering and leaving a scope, compiling regular expressions and so on.
</p><p>The array <code class="varname">PL_op_desc</code> in <code class="filename">opcode.h</code> describes each operation: it may be easier to follow the data from which this table is generated, at the end of <code class="filename">opcode.pl</code>. We'll take a longer look at that file later on in this chapter.
</p><p>Many of the operators are familiar from Perl-space, such as <code class="literal">concat</code> and <code class="literal">splice</code>, but some are used purely internally: for instance, one of the most common, <code class="literal">gvsv</code> fetches a scalar variable; <code class="literal">enter</code> and <code class="literal">leave</code> are block control operators, and so on.
</p>
</div><div class="sect2" lang="en"><div class="titlepage"><div><div>
<a name="Different_.22flavours.22_of_op"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=73" title="Edit section: Different &quot;flavours&quot; of op">edit</a>]</span> <span class="mw-headline"> Different "flavours" of op </span></h3>
</div></div></div>
<p>There are a number of different "flavours" of op structure, related to the arguments of an operator and how it fits together with other ops in the op tree. For instance, <code class="literal">scalar</code> is a unary operator, a <span class="type">UNOP</span>. This extends the basic op structure above with a link to the argument:
</p>
<pre>struct unop {
    BASEOP
    OP *    op_first;
};
</pre>
<p>Binary operators, such as <code class="literal">i_add</code>, (integer addition) have both a <code class="literal">first</code> and a <code class="literal">last</code>: 
</p>
<pre>struct binop {
    BASEOP
    OP *    op_first;
    OP *    op_last;
};
</pre>
<p>List operators are more interesting; they too have a <code class="literal">first</code> and a <code class="literal">last</code>, but they also have some ops in the middle, too. This is where <code class="literal">op_sibling</code> above comes in; it connects ops "sibling" ops on the same level in a list. For instance, look at the following code and the graph of its op tree:
</p>
<pre>open FILE, "foo";
print FILE "hi\n";
close FILE;
</pre>
<div class="mediaobject"><a href="/index.php/Image:Siblings.gif" class="image" title="Image:siblings.gif"><img alt="Image:siblings.gif" longdesc="/index.php/Image:Siblings.gif" src="/images/e/e7/Siblings.gif" width="800" height="402" /></a></div>
<p>The dashed lines represent <code class="literal">op_sibling</code> connections. The root operator of every program is the list operator <code class="literal">leave</code>, and its children are the statements in the program, separated by <code class="literal">nextstate</code> (next statement) operators. <code class="literal">open</code> is also a list operator, as is <code class="literal">print</code>. The first child of <code class="literal">print</code> is <code class="literal">pushmark</code>, which puts a mark on the stack (see [#ops.argstack the section called “The argument stack”]) so that Perl knows how many arguments on the stack belong to <code class="literal">print</code>. The <code class="literal">rv2gv</code> turns a reference to the filehandle <code class="varname">FILE</code> into a GV, so that <code class="literal">print</code> can print to it, and the final child is the constant <code class="literal">"hi\n"</code>.
</p><p>Some operators hold information about the program; these are COPs, or "code operators". Their definition is in <code class="filename">cop.h</code>: 
</p>
<pre>struct cop {
     BASEOP
     char *  cop_label;  /* label for this construct */
 #ifdef USE_ITHREADS
     char *  cop_stashpv;    /* package line was compiled in */
     char *  cop_file;   /* file name the following line # is from */
 #else
     HV *    cop_stash;  /* package line was compiled in */
     GV *    cop_filegv; /* file the following line # is from */
 #endif
     U32     cop_seq;    /* parse sequence number */
     I32     cop_arybase;    /* array base this line was compiled with */
     line_t      cop_line;       /* line # of this command */
     SV *    cop_warnings;   /* lexical warnings bitmask */
     SV *    cop_io;     /* lexical IO defaults */
 };
 	
</pre>
<p>COPs are inserted between every statement; they contain the label (for <code class="literal">goto</code>, <code class="literal">next</code> and so on) of the statement, the file name, package and line number of the statement and lexical hints such as the current value of <code class="varname">$[</code>, warnings and IO settings. Note that this doesn't contain the current CV or the padlist - these are kept on a special stack called the "context stack".
</p><p>The final type of op is the null op: any op with type zero means that a previous op has been optimized away; we'll look at how this is done later in this chapter, but for now, you should skip over the null op when you see it in op trees.
</p>
</div><div class="sect2" lang="en"><div class="titlepage"><div><div>
<a name="Tying_it_all_together"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=74" title="Edit section: Tying it all together">edit</a>]</span> <span class="mw-headline"> Tying it all together </span></h3>
</div></div></div>
<p>We've so far seen a little of how the op tree is connected together with <code class="literal">op_first</code>, <code class="literal">op_last</code>, <code class="literal">op_sibling</code>, and so on. Now we'll look at how the tree gets manufactured, as how it gets executed.
</p>
<div class="sect3" lang="en"><div class="titlepage"><div><div>
<a name=".22Tree.22_order"></a><h4><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=75" title="Edit section: &quot;Tree&quot; order">edit</a>]</span> <span class="mw-headline"> "Tree" order </span></h4>
</div></div></div>
<p>After our investigation of the parser in the previous chapter, it should now be straightforward to see how the op tree is created. The parser calls routines in <code class="filename">op.c</code> which create the op structures, passing ops further "down" the parse tree as arguments. This threads together a tree as shown in the diagram above. For comparison, here is the what the example in that chapter (<code class="literal">$a = $b + $c</code>) really looks like as an op tree:
</p>
<div class="mediaobject"><a href="/index.php/Image:Abc.gif" class="image" title="Image:abc.gif"><img alt="Image:abc.gif" longdesc="/index.php/Image:Abc.gif" src="/images/8/84/Abc.gif" width="274" height="327" /></a></div>
<p>Again, you can see the places where an op was optimized away and became a null op. This is not so different from the simplified version we gave earlier.
</p>
</div><div class="sect3" lang="en"><div class="titlepage"><div><div>
<a name="Execution_Order"></a><h4><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=76" title="Edit section: Execution Order">edit</a>]</span> <span class="mw-headline"> Execution Order </span></h4>
</div></div></div>
<p>The second thread through the op tree, indicated by the dotted line in our diagrams, is the execution order. This is the order in which Perl must actually perform the operations in order to run the program. The main loop of Perl is very, very simple, and you can see it in <code class="filename">run.c</code>: 
</p>
<pre>    while ((PL_op = CALL_FPTR(PL_op-&gt;op_ppaddr)(aTHX))) {
        PERL_ASYNC_CHECK();
    }
</pre>
<p>That's it. That's all the Perl interpreter is. <code class="varname">PL_op</code> represents the op that's currently being executed. Perl calls the function pointer for that op and expects another op to be returned; this return value is then set to <code class="varname">PL_op</code>, which is executed in turn. Since everything apart from conditional operators (for obvious reasons) just return <code class="varname">PL_op-&gt;op_next</code>, the execution order through a program can be found by chasing the trail of <code class="varname">op_next</code> pointers from the start node to the root.
</p><p>We can trace the execution order in several ways: if Perl is built with debugging, then we can say
</p>
<pre><b><code>perl -Dt -e 'open ...'</code></b>
</pre>
<p>Alternatively, and perhaps more simply, the compiler module <code class="classname">B::Terse</code> (see [#compiler Chapter�7, <i> The Perl Compiler</i>]) has an option to print the execution order, <code class="literal">-exec</code>. For instance, in our "open-print-close" example above, the execution order is:
</p>
<pre><code class="prompt">%</code> <b><code>perl -MO=Terse,-exec -e 'open FILE, "foo"; ...'</code></b>
<code class="computeroutput">OP (0x8111510) enter
COP (0x81121c8) nextstate
OP (0x8186f30) pushmark
SVOP (0x8186fe0) gv  GV (0x8111bd8) *FILE
SVOP (0x8186f10) const  PV (0x810dd98) "foo"
LISTOP (0x810a170) open [1]
COP (0x81114d0) nextstate
OP (0x81114b0) pushmark
SVOP (0x8118318) gv  GV (0x8111bd8) *FILE
UNOP (0x8111468) rv2gv
SVOP (0x8111448) const  PV (0x8111bfc) "hi\n"
LISTOP (0x8111488) print
COP (0x8111fe0) nextstate
SVOP (0x8111fc0) gv  GV (0x8111bd8) *FILE
UNOP (0x8111fa0) close
LISTOP (0x8111420) leave [1]</code>
</pre>
<p>This program, just like every other program, starts with the <code class="literal">enter</code> and <code class="literal">nextstate</code> ops to enter a scope and begin a new statement respectively. Then a mark is placed on the argument stack: marks represent the start of a set of arguments, and a list operator can retrieve all the arguments by pushing values off the stack until it finds a mark. Hence, we're notifying Perl of the beginning of the arguments to the <code class="literal">open</code> operator.
</p><p>The arguments in this case are merely the file handle to be opened and the file name; after operators put these two arguments on the stack, <code class="literal">open</code> can be called. This is the end of the first statement.
</p><p>Next, the arguments to <code class="literal">print</code> begin. This is slightly more tricky, because while <code class="literal">open</code> can only take a true filehandle, <code class="literal">print</code> may take any sort of reference. Hence, <code class="literal">gv</code> returns the GV and then this is turned into the appropriate filehandle type by the <code class="literal">rv2gv</code> operator. After the filehandle come the arguments to be printed; in this case, a constant (<code class="literal">"hi\n"</code>). Now all the arguments have been placed on the stack, <code class="literal">print</code> can be called. This is the end of the second statement.
</p><p>Finally, a filehandle is put on the stack and closed. Note that at this point, the connections between the operators - unary, binary, etc. - are not important; all manipulation of values comes not by looking at the children of the operators but by looking at the stack. The types of op are important for the construction of the tree in "tree order", but the stack and the <code class="literal">op_next</code> pointers are the only important things for the execution of the tree in execution order.
</p><p><font color="red">&lt;advanced&gt;
</p><p>How is the execution order determined? The function <code class="function">linklist</code> in <code class="filename">op.c</code> takes care of threading the <code class="literal">op_next</code> pointers in prefix order. It does so by recursively applying the following rule:
</p>
<div class="itemizedlist">
<ul><li> If there is a child for the current operator, visit the child first, then its siblings, then the current op.
</li></ul>
</div>
<p>Hence, the starting operator is always the first child of the root operator, (always <code class="literal">enter</code>) the second op to be executed is its sibling, <code class="literal">nextstate</code>, and then the children of the next op are visited. Similarly, the root itself (<code class="literal">leave</code>) is always the last operator to be executed. Null operators are skipped over during optimization.
</p>
&lt;/advanced&gt;</font></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="PP_Code"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=77" title="Edit section: PP Code">edit</a>]</span> <span class="mw-headline"> PP Code </span></h2>
</div></div></div>
<p>We know the order of execution of the operations, and what some of them do. Now it's time to look at how they're actually implemented - the source code inside the interpreter that actually carries out <code class="literal">print</code>, <code class="literal">+</code>, and other operations.
</p><p>The functions which implement operations are known as "PP Code" - "Push / Pop Code" - because most of their work involves popping off elements from a stack, performing some operation on it, and then pushing the result back. PP code can be found in several files: <code class="filename">pp_hot.c</code> contains frequently used code, put into a single object to encourage CPU caching; <code class="filename">pp_ctl.c</code> contains operations related to flow control; <code class="filename">pp_sys.c</code> contains the system-specific operations such as file and network handling; <code class="literal">pack</code> and <code class="literal">unpack</code> recently moved to <code class="filename">pp_pack.c</code>, and <code class="filename">pp.c</code> contains everything else.
</p>
<div class="sect2" lang="en"><div class="titlepage"><div><div>
<a name="The_argument_stack"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=78" title="Edit section: The argument stack">edit</a>]</span> <span class="mw-headline"> The argument stack </span></h3>
</div></div></div>
<p>We've already talked a little about the argument stack. The Perl interpreter makes use of several stacks, but the argument stack is the main one.
</p><p>The best way to see how the argument stack is used is to watch it in operation. With a debugging build of Perl, the <code class="literal">-Ds</code> command line switch prints out the contents of the stack in symbolic format between operations. Here is a portion of the output of running <b><code>$a=5; $b=10; print $a+$b;</code></b>: 
</p>
<pre>(-e:1)  nextstate
    =&gt;
(-e:1)  pushmark
    =&gt;  *
(-e:1)  gvsv(main::a)
    =&gt;  *  IV(5)
(-e:1)  gvsv(main::b)
    =&gt;  *  IV(5)  IV(10)
(-e:1)  add
    =&gt;  *  IV(15)
(-e:1)  print
    =&gt;  SV_YES

</pre>
<p>At the beginning of a statement, the stack is typically empty. First, Perl pushes a mark onto the stack to know when to stop pushing off arguments for <code class="literal">print</code>. Next, the values of <code class="varname">$a</code> and <code class="varname">$b</code> are retrieved and pushed onto the stack.
</p><p>The addition operator is a binary operator, and hence, logically, it takes two values off the stack, adds them together and puts the result back onto the stack. Finally, <code class="literal">print</code> takes all of the values off the stack up to the previous bookmark and prints them out. Let's not forget that <code class="literal">print</code> itself has a return value, the true value <code class="varname">SV_YES</code> which it pushes back onto the stack.
</p>
</div><div class="sect2" lang="en"><div class="titlepage"><div><div>
<a name="Stack_manipulation"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=79" title="Edit section: Stack manipulation">edit</a>]</span> <span class="mw-headline"> Stack manipulation </span></h3>
</div></div></div>
<p>Let's now take a look at one of the PP functions, the integer addition function <code class="literal">pp_i_add</code>. The code may look formidable, but it's a good example of how the PP functions manipulate values on the stack.
</p>
<div class="programlistingco">
<pre>PP(pp_i_add)
{
    dSP; dATARGET; tryAMAGICbin(add,opASSIGN);
    {
      dPOPTOPiirl_ul;
      SETi( left + right );
      RETURN;
    }
}
</pre>
<div class="calloutlist">
<table summary="Callout list">
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc1.png" class="image" title="1"><img alt="1" longdesc="/index.php/Image:Cc1.png" src="/images/6/66/Cc1.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>In case you haven't guessed, <span class="emphasis"><i>everything</i></span> in this function is a macro. This first line declares the function <code class="function">pp_i_add</code> to be the appropriate type for a PP function.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc2.png" class="image" title="2"><img alt="2" longdesc="/index.php/Image:Cc2.png" src="/images/9/9a/Cc2.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>Since following macros will need to manipulate the stack, the first thing we need is a local copy of the stack pointer, <code class="varname">SP</code>. And since this is C, we need to declare this in advance: <code class="literal">dSP</code> declares a stack pointer. Then we need an SV to hold the return value, a "target". This is declared with <code class="literal">dATARGET</code>; see [#ops.scratch the section called “ Scatchpads and Targets ”] for more on how targets work. Finally, there is a chance that the addition operator has been overloaded using the <code class="classname">overload</code> pragma. The <code class="literal">tryAMAGICbin</code> macro tests to see if it is appropriate to perform "A" (overload) magic on either of the scalars in a binary operation, and if so, does the addition using a magic method call.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc3.png" class="image" title="3"><img alt="3" longdesc="/index.php/Image:Cc3.png" src="/images/6/60/Cc3.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>We will deal with two values, <code class="varname">left</code> and <code class="varname">right</code>. The <code class="literal">dPOPTOPiirl_ul</code> macro pops two SVs off the top of the stack, converts them to two integers (hence <code class="literal">ii</code>) and stores them into automatic variables <code class="varname">right</code> and <code class="varname">left</code>. (hence <code class="literal">rl</code>) <font color="red">&lt;advanced&gt;</font>
</p><p>The <code class="literal">_ul</code>? Look up the definition in <code class="filename">pp.h</code> and work it out...
</p><p>&lt;/advanced&gt;
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc4.png" class="image" title="4"><img alt="4" longdesc="/index.php/Image:Cc4.png" src="/images/0/08/Cc4.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>We add the two values together, and set the integer value of the target to the result, pushing the target to the top of the stack.
</p>
</td></tr>
<tr>
<td width="5%" align="left" valign="top">
<p><a href="/index.php/Image:Cc5.png" class="image" title="5"><img alt="5" longdesc="/index.php/Image:Cc5.png" src="/images/f/f0/Cc5.png" width="12" height="12" /></a>
</p>
</td><td align="left" valign="top">
<p>As mentioned above, operators are expected to return the next op to be executed, and in most cases this is simply the value of <code class="varname">op_next</code>. Hence <code class="literal">RETURN</code> performs a normal return, copying our local stack pointer <code class="varname">SP</code> which we obtained above back into the global stack pointer variable, and then returning the <code class="varname">op_next</code>.
</p>
</td></tr></table>
</div></div>
<p>As you might have guessed, there are a number of macros for controlling what happens to the stack; these can be found in <code class="filename">pp.h</code>. The more common of these are:
</p>
<div class="variablelist">
<dl><dt> <span class="term"><code class="literal">POPs</code></span>
</dt><dd> Pop an <span class="type">SV</span> off the stack and return it.
</dd><dt> <span class="term"><code class="literal">POPpx</code></span>
</dt><dd> Pop a string off the stack and return it. (Note: requires a variable "<span class="type">STRLEN</span> <code class="varname">n_a</code>" to be in scope.)
</dd><dt> <span class="term"><code class="literal">POPn</code></span>
</dt><dd> Pop an NV off the stack.
</dd><dt> <span class="term"><code class="literal">POPi</code></span>
</dt><dd> Pop an IV off the stack.
</dd><dt> <span class="term"><code class="literal">TOPs</code></span>
</dt><dd> Return the top SV on the stack, but do not pop it. (The macros <code class="literal">TOPpx</code>, <code class="literal">TOPn</code>, etc. are analogous)
</dd><dt> <span class="term"><code class="literal">TOPm1s</code></span>
</dt><dd> Return the penultimate SV on the stack. (There is no <code class="literal">TOPm1px</code>, etc.)
</dd><dt> <span class="term"><code class="literal">PUSHs</code></span>
</dt><dd> Push the scalar onto the stack; you must ensure that the stack has enough space to accommodate it.
</dd><dt> <span class="term"><code class="literal">PUSHn</code></span>
</dt><dd> Set the NV of the target to the given value, and push it onto the stack. <code class="literal">PUSHi</code>, etc. are analogous.
</dd></dl>
<p>There is also an <code class="literal">XPUSHs</code>, <code class="literal">XPUSHn</code>, etc. which extends the stack if necessary.
</p>
<dl><dt> <span class="term"><code class="literal">SETs</code></span>
</dt><dd> This sets the top element of the stack to the given SV. <code class="literal">SETn</code>, etc. are analogous.
</dd><dt> <span class="term"><code class="literal">dTOPss</code>, <code class="literal">dPOPss</code></span>
</dt><dd> These declare a variable called <code class="varname">sv</code>, and either return the top entry from the stack or pop an entry and set <code class="varname">sv</code> to it.
</dd><dt> <span class="term"><code class="literal">dTOPnv</code>, <code class="literal">dPOPnv</code></span>
</dt><dd> These are similar, but declare a variable called <code class="varname">value</code> of the appropriate type. <code class="literal">dTOPiv</code> and so on are analogous.
</dd></dl>
</div>
<p>In some cases, the PP code is purely concerned with rearranging the stack, and the PP function will call out to another function in <code class="filename">doop.c</code> to actually perform the relevant operation.
</p>
</div></div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="The_opcode_table_and_opcodes.pl"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=80" title="Edit section: The opcode table and opcodes.pl">edit</a>]</span> <span class="mw-headline"> The opcode table and <code class="filename">opcodes.pl</code> </span></h2>
</div></div></div>
<p>The header files for the opcode tables are generated from a Perl program called <code class="filename">opcode.pl</code>. Here is a sample entry for an op:
</p>
<pre>index             index                      ck_index isT@     S S S?
</pre>
<p>The entry is in five columns.
</p><p>The first column is the internal name of the operator. When <code class="filename">opcode.pl</code> is run, it will create an enum including the symbol <code class="literal">OP_INDEX</code>.
</p><p>The second column is the English description of the operator which will be printed during error messages.
</p><p>The third column is the name of the "check" function which will be used to optimize this tree; see [#ops.optimize the section called “ The Optimizer ”].
</p><p>Then come additional flags plus a character which specifies the "flavour" of the op: in this case, <code class="literal">index</code> is a list op, since it can take more than two parameters, so it has the symbol <code class="literal">@</code>.
</p><p>Finally, the "prototype" for the function is given: <code class="literal">S S S?</code> translates to the Perl prototype <code class="literal">$$;$</code>, which is indeed the prototype for <code class="literal">CORE::index</code>.
</p><p>While most people will never need to edit the op table, it is as well to understand how Perl "knows" what the ops look like. There is a full description of the format of the table, including details of the meanings of the flags, in <code class="filename">opcodes.pl</code>.
</p>
</div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="Scatchpads_and_Targets"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=81" title="Edit section: Scatchpads and Targets">edit</a>]</span> <span class="mw-headline"> Scatchpads and Targets </span></h2>
</div></div></div>
<p>PP code is the guts of Perl execution, and hence is highly optimized for speed. One thing that you don't want to do in time-critical areas is create and destroy SVs, because allocating and freeing memory is a slow process. So Perl allocates for each op a <i>target</i> SV which is created at compile time. We've seen above that PP code gets the target and uses the <code class="literal">PUSH</code> macros to push the target onto the stack.
</p><p>Targets live on the scratchpad, just like lexical variables. <code class="literal">op_targ</code> for an op is an offset in the current pad; it is the element number in the pad's array which stores the SV that should be used as the target. Perl arranges that ops can reuse the same target if they are not going to collide on the stack; similarly, it also directly uses lexical variables on the pad as targets if appropriate instead of going through a <code class="literal">padsv</code> operation to extract them. (This is a standard compiler technique called "binding".)
</p><p>You can tell if an SV is a target by its flags: targets (also known as temporaries) have the <code class="literal">TEMP</code> flag set, and SVs bound to lexical variables on the pad have the <code class="literal">PADMY</code> flag set.
</p>
</div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="The_Optimizer"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=82" title="Edit section: The Optimizer">edit</a>]</span> <span class="mw-headline"> The Optimizer </span></h2>
</div></div></div>
<p>Between compiling the op tree and executing it, Perl goes through three stages of optimization.
</p><p>The first stage actually happens as the tree is being constructed. Once Perl creates an op, it passes it off to a check routine. We saw above how the check routines are assigned to operators in the op table; an <code class="literal">index</code> op will be passed to <code class="literal">ck_index</code>. This routine may manipulate the op in any way it pleases, including freeing it, replacing it with a different op, or adding new ops above or below it. They are sometimes called in a chain: for instance, the check routine for <code class="literal">index</code> simply tests to see if the string being sought is a constant, and if so, performs a Fast Boyer-Moore string compilation to speed up the search at runtime; then it calls the general function-checking routine <code class="function">ck_fun</code>.
</p><p>Secondly, the constant folding routine <code class="function">fold_constants</code> is called if appropriate. This tests to see whether all of the descendents of the op are constants, and if they are, runs the operator as if it was a little program, collects the result and replaces the op with a constant op reflecting that result. You can tell if constants have been folded by using the "deparse" compiler backend (see [#compiler.deparse the section called “<code class="classname">B::Deparse</code>”]):
</p>
<pre><code class="prompt"> %</code> <b><code>perl -MO=Deparse -e 'print (3+5+8+$foo)'</code></b>
<code class="computeroutput">print 16 + $foo;
	</code>
</pre>
<p>Here, the <code class="literal">3+5</code> has been constant-folded into <code class="literal">8</code>, and then <code class="literal">8+8</code> is constant-folded to 16.
</p><p>Finally, the peephole optimizer <code class="function">peep</code> is called. This examines each op in the tree in execution order, and attempts to determine "local" optimizations by "thinking ahead" one or two ops and seeing if multiple operations can be combined into one. It also checks for lexical issues such as the effect of <code class="literal">use strict</code> on bareword constants.
</p>
</div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="Summary_5"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=83" title="Edit section: Summary">edit</a>]</span> <span class="mw-headline"> Summary </span></h2>
</div></div></div>
<p>Perl's fundamental operations are represented by a series of structures, analogous to the structures which make up Perl's internal values. These ops are threaded together in two ways - firstly, into an op tree during the parsing process, where each op dominates its arguments, and secondly, by a thread of execution which establishes the order in which Perl has to run the ops.
</p><p>To run the ops, Perl uses the code in <code class="filename">pp*.c</code>, which is particularly macro-heavy. Most of the macros are concerned with manipulating the argument stack, which is the means by which Perl passes data between operations.
</p><p>Once the op tree is constructed, there are a number of means by which it is optimized - check routines and constant folding which takes place after each op is created, and a peephole optimizer which performs a "dry run" over the execution order.
</p>
</div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="Exercises_5"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=84" title="Edit section: Exercises">edit</a>]</span> <span class="mw-headline"> Exercises </span></h2>
</div></div></div>
<div class="orderedlist">
<ol><li> The function <code class="function">op_null</code> turns an op into a null op. Find all the occasions in which a null op is constructed, and explain in each case why the op has been nullified.
</li><li> Explain what is going on in the bottom half of <code class="function">Perl_utilize</code>. (after the comment <code class="literal">Fake up an import/unimport</code>)
</li><li> Add a check for the range operator - if both sides are constant, ensure that the left is less than the right.
</li></ol>
</div>
</div></div><div class="chapter" lang="en"><div class="titlepage"><div><div>
<a name="The_Perl_Compiler"></a><h1><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=85" title="Edit section: The Perl Compiler">edit</a>]</span> <span class="mw-headline"> The Perl Compiler </span></h1>
<a name="What_is_the_Perl_Compiler.3F"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=86" title="Edit section: What is the Perl Compiler?">edit</a>]</span> <span class="mw-headline"> What is the Perl Compiler? </span></h2>
<p>In 1996, someone <i><span class="comment">(I think it was Chip. Must check.)</span></i> announced a challenge - the first person to write a compiler suite for Perl would win a laptop. Malcolm Beattie stepped up to the challenge, and won the laptop with his <code class="classname">B</code> suite of modules. Many of these modules have now been brought into the Perl core as standard modules.
</p><p>The Perl compiler is not just for compiling Perl code to a standalone executable - in fact, some would argue that it's not <span class="emphasis"><i>at all</i></span> for compiling Perl into a standalone executable. We've already seen the use of the <code class="classname">B::Terse</code> and <code class="classname">B::Tree</code> modules to help us visualise the Perl op tree, and this should give us a hint as to what the Perl compiler is actually all about.
</p><p>The compiler comes in three parts: a frontend module, <code class="classname">O</code>, which does little other than turn on Perl's <code class="literal">-c</code> (compile only, do not run) flag, and loads up a backend module, such as <code class="classname">B::Terse</code> which performs a specific compiler task, and the <code class="classname">B</code> module which acts as a low-level driver.
</p><p>The <code class="classname">B</code>, at the heart of the compiler, is a stunningly simple XS module which makes Perl's internal object-like structures - SVs, ops, and so on - into real Perl-space objects. This provides us with a degree of introspection: we can, for instance, write a backend module which traverses the op tree of a compiled program and dump out its state to a file. (This is exactly what the <code class="classname">B::Bytecode</code> module does.)
</p><p>It's important to know what the Perl compiler is not. It's not something which will magically make your code go faster, or take up less space, or be more reliable. The backends which generate standalone code generally do exactly the opposite. All the compiler is, essentially, is a way of getting access to the op tree and doing something potentially interesting with it. Let's now take a look at some of the interesting things that can be done with it.
</p>
<a name="B::_Modules"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=87" title="Edit section: B:: Modules">edit</a>]</span> <span class="mw-headline"> <code class="classname">B::</code> Modules </span></h2>
</div></div></div>
<p>There are twelve backend modules to the compiler in the Perl core, and many more besides on CPAN. Here we'll briefly examine those which are particularly helpful to internals hackers or particularly interesting.
</p>
<div class="sect2" lang="en"><div class="titlepage"><div><div>
<a name="B::Concise"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=88" title="Edit section: B::Concise">edit</a>]</span> <span class="mw-headline"> <code class="classname">B::Concise</code> </span></h3>
</div></div></div>
<p><code class="classname">B::Concise</code> was written quite recently by Stephen McCamant to provide a generic way of getting concise information about the op tree. It is highly customizable, and can be used to emulate <code class="classname">B::Terse</code> and <code class="classname">B::Debug</code>. (see below)
</p><p>Here's the basic output from <code class="classname">B::Concise</code>: 
</p>
<pre>	    <code class="prompt">%</code> <b><code>perl -MO=Concise -e 'print $a+$b'</code></b>
1r &lt;@&gt; leave[t1] vKP/REFC -&gt;(end)
1k    &lt;0&gt; enter -&gt;1l
1l    &lt;;&gt; nextstate(main 7 -e:1) v -&gt;1m
1q    &lt;@&gt; print vK -&gt;1r
1m       &lt;0&gt; pushmark s -&gt;1n
1p       &lt;2&gt; add[t1] sK/2 -&gt;1q
-           &lt;1&gt; ex-rv2sv sK/1 -&gt;1o
1n             &lt;$&gt; gvsv(*a) s -&gt;1o
-           &lt;1&gt; ex-rv2sv sK/1 -&gt;1p
1o             &lt;$&gt; gvsv(*b) s -&gt;1p
</pre>
<p>Each line consists of five main parts:
</p>
<div class="itemizedlist">
<ul><li> a label for this operator (in this case, <code class="literal">1r</code>)
</li><li> a type signifier (<code class="literal">@</code> is a list operator - think arrays)
</li><li> the name of the op and its target, if any, plus any other information about it
</li><li> the flags for this operator. Here, <code class="literal">v</code> signifies void context and <code class="literal">K</code> shows that this operator has children. The private flags are shown after the slash, and are written out as a longer abbreviation than just one character: <code class="literal">REFC</code> shows that this op is refcounted.
</li><li> finally, the label for the next operator in the tree, if there is one.
</li></ul>
</div>
<p>Note also that, for instance, ops which have been optimized away to a null are left as "ex-...". The exact meanings of the flags and the op classes are given in the <code class="classname">B::Concise</code> documentation:
</p>
<pre>=head2 OP flags abbreviations
 
     v      OPf_WANT_VOID    Want nothing (void context)
     s      OPf_WANT_SCALAR  Want single value (scalar context)
     l      OPf_WANT_LIST    Want list of any length (list context)
     K      OPf_KIDS         There is a firstborn child.
     P      OPf_PARENS       This operator was parenthesized.
                              (Or block needs explicit scope entry.)
     R      OPf_REF          Certified reference.
                              (Return container, not containee).
     M      OPf_MOD          Will modify (lvalue).
     S      OPf_STACKED      Some arg is arriving on the stack.
     *      OPf_SPECIAL      Do something weird for this op (see op.h)
 
 =head2 OP class abbreviations
 
     0      OP (aka BASEOP)  An OP with no children
     1      UNOP             An OP with one child
     2      BINOP            An OP with two children
     |      LOGOP            A control branch OP
     @      LISTOP           An OP that could have lots of children
     /      PMOP             An OP with a regular expression
     $      SVOP             An OP with an SV
     &quot;      PVOP             An OP with a string
     {      LOOP             An OP that holds pointers for a loop
     ;      COP              An OP that marks the start of a statement
</pre>
<p>As with many of the debugging <code class="classname">B::</code> modules, you can use the <code class="literal">-exec</code> flag to walk the op tree in execution order, following the chain of <code class="varname">op_next</code>'s from the start of the tree:
</p>
<pre>	    <code class="prompt">%</code> <b><code>perl -MO=Concise,-exec -e 'print $a+$b'</code></b>
1k &lt;0&gt; enter
1l &lt;;&gt; nextstate(main 7 -e:1) v
1m &lt;0&gt; pushmark s
1n &lt;$&gt; gvsv(*a) s
1o &lt;$&gt; gvsv(*b) s
1p &lt;2&gt; add[t1] sK/2
1q &lt;@&gt; print vK
1r &lt;@&gt; leave[t1] vKP/REFC
-e syntax OK

</pre>
<p>Amongst other options, (again, see the documentation) <code class="classname">B::Concise</code> supports a <code class="literal">-tree</code> option for tree-like ASCII art graphs, and the curious but fun <code class="literal">-linenoise</code> option.
</p>
</div><div class="sect2" lang="en"><div class="titlepage"><div><div>
<a name="B::Debug"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=89" title="Edit section: B::Debug">edit</a>]</span> <span class="mw-headline"> <code class="classname">B::Debug</code> </span></h3>
</div></div></div>
<p><code class="classname">B::Debug</code> dumps out <span class="emphasis"><i>all</i></span> of the information in the op tree; for anything bigger than a trivial program, this is just way too much information. Hence, to sensibly make use of it, it's a good idea to go through with <code class="classname">B::Terse</code> or <code class="classname">B::Concise</code> first, and find which ops you're interested in, and then grep for them.
</p><p>Some output from <code class="classname">B::Debug</code> looks like this:
</p>
<pre>LISTOP (0x81121a8)
        op_next         0x0
        op_sibling      0x0
        op_ppaddr       PL_ppaddr[OP_LEAVE]
        op_targ         1
        op_type         178
        op_seq          6433
        op_flags        13
        op_private      64
        op_first        0x81121d0
        op_last         0x8190498
        op_children     3
OP (0x81121d0)
        op_next         0x81904c0
        op_sibling      0x81904c0
        op_ppaddr       PL_ppaddr[OP_ENTER]
        op_targ         0
        op_type         177
        op_seq          6426
        op_flags        0
        op_private      0
</pre>
<p>As you should know from the ops chapter, this is all the information contained in the op structure: the type of op and its address, the ops related to it, the C function pointer implementing the PP function, the target on the scratchpad this op uses, its type, sequence number, and public and private flags. It also does similar dumps for SVs. You may find the <code class="classname">B::Flags</code> module useful for "Englishifying" the flags.
</p>
</div><div class="sect2" lang="en"><div class="titlepage"><div><div>
<a name="B::Deparse"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=90" title="Edit section: B::Deparse">edit</a>]</span> <span class="mw-headline"> <code class="classname">B::Deparse</code> </span></h3>
</div></div></div>
<p><code class="classname">B::Deparse</code> takes a Perl program and turns it into a Perl program. This doesn't sound very impressive, but it actually does so by decompiling the op tree back into Perl. While this has interesting uses for things like serializing subroutines, it's interesting for internals hackers because it shows us how Perl understands certain constructs. For instance, we can see that logical operators and binary "if" are equivalent:
</p>
<pre><code class="prompt">%</code> <b><code> perl -MO=Deparse -e '$a and do {$b}'</code></b>
<code class="computeroutput">if ($a) {
    do {
        $b;
    };
}
-e syntax OK</code>
</pre>
<p>We can also see, for instance, how the magic that is added by command line switches goes into the op tree:
</p>
<pre><code class="prompt">%</code> <b><code>perl -MO=Deparse -ane 'print'</code></b>
<code class="computeroutput">LINE: while (defined($_ = &lt;ARGV&gt;)) {
    @F = split(" ", $_, 0);
    print $_;
}
-e syntax OK</code>
</pre>
</div></div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="What_B_and_O_Provide"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=91" title="Edit section: What B and O Provide">edit</a>]</span> <span class="mw-headline"> What <code class="classname">B</code> and <code class="classname">O</code> Provide </span></h2>
</div></div></div>
<p>To see how we can built compilers and introspective modules with <code class="classname">B</code>, we need to see what <code class="classname">B</code> and the compiler front-end <code class="classname">O</code> give us. We'll start with <code class="classname">O</code>, since it's simpler.
</p>
<div class="sect2" lang="en"><div class="titlepage"><div><div>
<a name="O"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=92" title="Edit section: O">edit</a>]</span> <span class="mw-headline"> <code class="classname">O</code> </span></h3>
</div></div></div>
<p>The guts of the <code class="classname">O</code> module are very small - only 48 lines of code - because all it intends to do is set up the environment ready for a back-end module. The back-ends are expected to provide a subroutine called <code class="function">compile</code> which processes the options that are passed to it and then returns a subroutine reference which does the actual compilation. <code class="classname">O</code> then calls this subroutine reference in a CHECK block.
</p><p>CHECK blocks were specifically designed for the compiler - they're called after Perl has finished constructing the op tree and before it starts running the code. <code class="classname">O</code> calls the <code class="classname">B</code> subroutine <code class="function">minus_c</code> which, as its name implies, is equivalent to the command-line <code class="literal">-c</code> flag to perl: compile but do not execute the code. It then ensures that any BEGIN blocks are accessible to the back-end modules, and then calls <code class="function">compile</code> from the back-end processor with any options from the command line.
</p>
</div><div class="sect2" lang="en"><div class="titlepage"><div><div>
<a name="B"></a><h3><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=93" title="Edit section: B">edit</a>]</span> <span class="mw-headline"> <code class="classname">B</code> </span></h3>
</div></div></div>
<p>As we have mentioned, the B module allows Perl-level access to ops and internal variables. There are two key ways to get this access: from the op tree, or from a user-specified Perl "thing".
</p><p>To get at the op tree, <code class="classname">B</code> provides the <code class="function">main_root</code> and <code class="function">main_start</code> functions. These return <code class="classname">B::OP</code>-derived objects representing the root of the op tree and the start of the tree in execution order respectively:
</p>
<pre><code class="prompt">%</code> <b><code> perl -MB -le 'print B::main_root; print B::main_start'</code></b>
<code class="computeroutput">B::LISTOP=SCALAR(0x8104180)
B::OP=SCALAR(0x8104180)</code>

</pre>
<p>For everything else, you can use the <code class="function">svref_2object</code> function which turns some kind of reference into the appropriate <code class="classname">B::SV</code>-derived object:
</p>
<pre><code class="prompt">%</code> <b><code> perl -MB -l 	  $a = 5; print B::svref_2object(\$a);  	  @a=(1,2,3); print B::svref_2object(\@a); 	  </code></b>
	  <code class="computeroutput">B::IV=SCALAR(0x811f9b8)
B::AV=SCALAR(0x811f9b8)
	  </code>

</pre>
<p>(Yes, it's normal that the objects will have the same addresses.)
</p><p>In this tutorial we'll concentrate on the op-derived classes, because they're the most useful feature of <code class="classname">B</code> for compiler construction; the SV classes are a lot simpler and quite analogous.
</p>
</div></div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="Using_B_for_Simple_Things"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=94" title="Edit section: Using B for Simple Things">edit</a>]</span> <span class="mw-headline"> Using <code class="classname">B</code> for Simple Things </span></h2>
</div></div></div>
<p>OK, so now we have the objects - what can we do with them? <code class="classname">B</code> provides accessor methods similar to the fields of the structures in <code class="filename">op.h</code> and <code class="filename">sv.h</code>. For instance, we can find out the type of the root op like this:
</p>
<pre><b><code>$op=B::main_root; print $op-&gt;type;</code></b>
<code class="computeroutput">178</code>
</pre>
<p>Oops: <code class="varname">op_type</code> is actually an enum, so we can't really get much from looking at that directly; however, <code class="classname">B</code> also gives us the <code class="function">name</code> method, which is a little friendlier:
</p>
<pre><b><code>$op=B::main_root; print $op-&gt;name;</code></b>
<code class="computeroutput">leave</code>
</pre>
<p>We can also use <code class="function">flags</code>, <code class="function">private</code>, <code class="function">targ</code>, and so on - in fact, everything we saw prefixed by <code class="function">op_</code> in the <code class="classname">B::Debug</code> example above.
</p><p>What about traversing the op tree, then? You should be happy to learn that <code class="function">first</code>, <code class="function">sibling</code>, <code class="function">next</code> and friends return the <code class="classname">B::OP</code> object for the related op. That's to say, you can follow the op tree in execution order by doing something like this:
</p>
<pre>#!/usr/bin/perl -cl
 use B;
 CHECK {
 	  $op=B::main_start;
 	  print $op-&gt;name while $op=$op-&gt;next;
 }
 
 print $a+$b;
 ...
       
</pre>
<p>Except that's not quite there; when you get to the last op in the sequence, the "enter" at the root of the tree, <code class="function">op_next</code> will be a null pointer. <code class="classname">B</code> represents a null pointer by the <code class="classname">B::NULL</code> object, which has no methods. This has the handy property that if <code class="varname">$op</code> is a <code class="classname">B::NULL</code>, then <code class="varname">$$op</code> will be zero. So we can print the name of each op in execution order by saying:
</p>
<pre>	  $op=B::main_start;
	  print $op-&gt;name while $op=$op-&gt;next and $$op;
</pre>
<p>Walking the tree in normal order is a bit more tricky, since we have to make the right moves appropriate for each type of op: we need to look at both <code class="varname">first</code> and <code class="varname">last</code> links from binary ops, for instance, but only the <code class="varname">first</code> from a unary op. Thankfully, <code class="classname">B</code> provides a function which does this all for us: <code class="function">walkoptree_slow</code>. This arranges to call a user-specified method on each op in turn. Of course, to make it useful, we have to define the method...
</p>
<pre>#!/usr/bin/perl -cl
 use B;
 CHECK {
       B::walkoptree_slow(B::main_root, &quot;print_it&quot;, 0);
       sub B::OP::print_it { my $self = shift; print $self-&gt;name }
 }
 
 print $a+$b;
 ...
</pre>
<p>Since all ops inherit from <code class="classname">B::OP</code>, this duly produces:
</p>
<pre><code class="computeroutput">leave
enter
nextstate
print
pushmark
add
null
gvsv
null
gvsv
     </code>

</pre>
<p>We can also use the knowledge that <code class="function">walkoptree_slow</code> passes the recursion level as a parameter to the callback method, and prettify the tree a little, like this:
</p>
<pre>      sub B::OP::print_it {
          my ($self,$level)=@_;
          print "    "x$level, $self-&gt;name
      }

</pre>
<pre><code class="computeroutput">leave
    enter
    nextstate
    print
        pushmark
        add
            null
                gvsv
            null
                gvsv
      </code>

</pre>
<p>See how we're starting to approximate <code class="classname">B::Terse</code>? Actually, <code class="classname">B::Terse</code> uses the <code class="function">B::peekop</code> function, a little like this:
</p>
<pre>      sub B::OP::print_it {
          my ($self,$level)=@_;
          print "    "x$level, B::peekop($self);
      }

</pre>
<pre><code class="computeroutput">LISTOP (0x81142c8) leave
    OP (0x81142f0) enter
    COP (0x8114288) nextstate
    LISTOP (0x8114240) print
        OP (0x8114268) pushmark
        BINOP (0x811d920) add
            UNOP (0x8115840) null
                SVOP (0x8143158) gvsv
            UNOP (0x811d900) null
                SVOP (0x8115860) gvsv
      </code>

</pre>
<p>All that's missing is that <code class="classname">B::Terse</code> provides slightly more information based on each different type of op, and that can be easily done by putting methods in the individual op classes: <code class="classname">B::LISTOP</code>, <code class="classname">B::UNOP</code> and so on.
</p><p>Let's finish off our little compiler - let's call it <code class="classname">B::Simple</code> - by turning it into a module that can be used from the <code class="classname">O</code> front-end. This is easy enough to do in our case, once we remember that <code class="function">compile</code> has to return a callback subroutine reference:
</p>
<pre>package B::Simple;
use B qw(main_root peekop walkoptree_slow);

sub B::OP::print_it {
    my ($self,$level)=@_;
    print "    "x$level, peekop($self);
}

sub compile {
    return sub { walkoptree_slow(main_root, "print_it", 0); }
}

1;
</pre>
<p>If we save the above code as <code class="filename">B/Simple.pm</code>, we can run it on our own programs with <b><code>perl -MO=Simple ...</code></b>. We have a backend compiler module!
</p>
</div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="Summary_6"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=95" title="Edit section: Summary">edit</a>]</span> <span class="mw-headline"> Summary </span></h2>
</div></div></div>
<p>In this chapter, we've examined the basics of the Perl compiler: its front-end <code class="classname">O</code>, the nuts-and-bolts module <code class="classname">B</code>, and how to write both backend modules using these. Writing compiler modules is really an excellent way to learn about how the Perl op tree fits together and what the operations signify, so you are encouraged to complete at least some of the following exercises.
</p>
</div><div class="sect1" lang="en"><div class="titlepage"><div><div>
<a name="Exercises_6"></a><h2><span class="editsection">[<a href="/index.php?title=Perl_5_Internals&amp;action=edit&amp;section=96" title="Edit section: Exercises">edit</a>]</span> <span class="mw-headline"> Exercises </span></h2>
</div></div></div><div class="orderedlist">
<ol><li> Examine the code to <code class="classname">B::Bblock</code>. As the documentation says, " A basic block is a series of operations which is known to execute from start to finish, with no possiblity of branching or halting."
</li></ol>
<p>If there are any ops following a <code class="literal">return</code> operation inside a basic block, they will never be executed and can be considered dead code. Write a module which detects and reports this type of dead code.
</p>
<ol><li> Add line numbers to your dead code reporting module by examining the nearest CV.
</li><li> Extend the module to report unreachable code after unconditional <code class="literal">next</code> and <code class="literal">last</code> statements.
</li></ol>
</div><font color="red">&lt;advanced&gt;<div class="orderedlist">
<ol><li> Write a module which tracks variable access and reports dead code based on it. For instance, Perl can optimize
</li></ol>
<pre>#!/usr/bin/perl
 if (0) {
     ...
 }
 	    
</pre>
<p>away to nothing, but cannot currently remove
</p>
<pre>#!/usr/bin/perl
 $foo=0;
 if ($foo) {
     ...
 }	      
</pre>
<ol><li> Write a module which describes other optimizations that can be made. For instance, given
</li></ol>
<pre>$a = $x * $y;
$b = $x * $y;
</pre>
<p>optimize to
</p>
<pre>$b = $a = $x * $y;
</pre>
</div>&lt;/advanced&gt;</font></div></div><div class="appendix" lang="en"><div class="titlepage"><div><div></div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>

<!-- Saved in parser cache with key books:pcache:idhash:20-0!1!0!!en!2 and timestamp 20080122020330 -->
<div class="printfooter">
Retrieved from "<a href="http://books.simon-cozens.org/index.php/Perl_5_Internals">http://books.simon-cozens.org/index.php/Perl_5_Internals</a>"</div>
						<!-- end content -->
			<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
					 <li id="ca-nstab-main" class="selected"><a href="/index.php/Perl_5_Internals" title="View the content page [c]" accesskey="c">Article</a></li>
					 <li id="ca-talk" class="new"><a href="/index.php?title=Talk:Perl_5_Internals&amp;action=edit" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
					 <li id="ca-edit"><a href="/index.php?title=Perl_5_Internals&amp;action=edit" title="You can edit this page. Please use the preview button before saving. [e]" accesskey="e">Edit</a></li>
					 <li id="ca-history"><a href="/index.php?title=Perl_5_Internals&amp;action=history" title="Past versions of this page. [h]" accesskey="h">History</a></li>
				</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/index.php?title=Special:Userlogin&amp;returnto=Perl_5_Internals" title="You are encouraged to log in, it is not mandatory however. [o]" accesskey="o">Log in / create account</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(http://books.simon-cozens.org/books.gif);" href="/index.php/Main_Page" title="Visit the Main Page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
		<div class='portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage"><a href="/index.php/Main_Page" title="Visit the Main Page [z]" accesskey="z">Main Page</a></li>
				<li id="n-portal"><a href="/index.php/Books:Community_Portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-currentevents"><a href="/index.php/Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-recentchanges"><a href="/index.php/Special:Recentchanges" title="The list of recent changes in the wiki. [r]" accesskey="r">Recent changes</a></li>
				<li id="n-randompage"><a href="/index.php/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
				<li id="n-help"><a href="/index.php/Help:Contents" title="The place to find out.">Help</a></li>
				<li id="n-sitesupport"><a href="/index.php/Books:Site_support" title="Support us">Donations</a></li>
			</ul>
		</div>
	</div>
		<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/index.php/Special:Search" id="searchform"><div>
				<input id="searchInput" name="search" type="text" title="Search Books [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" />
			</div></form>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/index.php/Special:Whatlinkshere/Perl_5_Internals" title="List of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/index.php/Special:Recentchangeslinked/Perl_5_Internals" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-upload"><a href="/index.php/Special:Upload" title="Upload images or media files [u]" accesskey="u">Upload file</a></li>
<li id="t-specialpages"><a href="/index.php/Special:Specialpages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
				<li id="t-print"><a href="/index.php?title=Perl_5_Internals&amp;printable=yes">Printable version</a></li>				<li id="t-permalink"><a href="/index.php?title=Perl_5_Internals&amp;oldid=98">Permanent link</a></li>			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
			<ul id="f-list">
				<li id="lastmod"> This page was last modified 21:56, 24 August 2007.</li>
				<li id="viewcount">This page has been accessed 1,335 times.</li>
				<li id="privacy"><a href="/index.php/Books:Privacy_policy" title="Books:Privacy policy">Privacy policy</a></li>
				<li id="about"><a href="/index.php/Books:About" title="Books:About">About Books</a></li>
				<li id="disclaimer"><a href="/index.php/Books:General_disclaimer" title="Books:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
		
	
		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
</div>
<!-- Served by hosted.simon-cozens.org in 0.574 secs. --></body></html>
